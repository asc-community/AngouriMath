//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./AngouriMath.g by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AngouriMath.Core.Antlr {

    using System.Linq;
    using AngouriMath;
    using static AngouriMath.Core.Exceptions.FunctionArgumentCountException;
    using static AngouriMath.Entity.Number;
    using AngouriMath.Core.Exceptions;
    using static AngouriMath.Entity.Set;
    using static AngouriMath.Entity;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
internal partial class AngouriMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, NEWLINE=121, NUMBER=122, SPECIALSET=123, BOOLEAN=124, VARIABLE=125, 
		COMMENT=126, WS=127;
	public const int
		RULE_factorial_expression = 0, RULE_power_list = 1, RULE_power_expression = 2, 
		RULE_unary_expression = 3, RULE_mult_expression = 4, RULE_sum_expression = 5, 
		RULE_set_operator_intersection = 6, RULE_set_operator_union = 7, RULE_set_operator_setsubtraction = 8, 
		RULE_in_operator = 9, RULE_inequality_expression = 10, RULE_terms_list = 11, 
		RULE_equality_expression = 12, RULE_negate_expression = 13, RULE_and_expression = 14, 
		RULE_xor_expression = 15, RULE_or_expression = 16, RULE_implies_expression = 17, 
		RULE_provided_expression = 18, RULE_expression = 19, RULE_function_arguments = 20, 
		RULE_interval_arguments = 21, RULE_cset_arguments = 22, RULE_atom = 23, 
		RULE_statement = 24;
	public static readonly string[] ruleNames = {
		"factorial_expression", "power_list", "power_expression", "unary_expression", 
		"mult_expression", "sum_expression", "set_operator_intersection", "set_operator_union", 
		"set_operator_setsubtraction", "in_operator", "inequality_expression", 
		"terms_list", "equality_expression", "negate_expression", "and_expression", 
		"xor_expression", "or_expression", "implies_expression", "provided_expression", 
		"expression", "function_arguments", "interval_arguments", "cset_arguments", 
		"atom", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'^'", "'-'", "'+'", "'*'", "'/'", "'intersect'", "'/\\'", 
		"'unite'", "'\\/'", "'setsubtract'", "'\\'", "'in'", "'>='", "'<='", "'>'", 
		"'<'", "'equalizes'", "'='", "'not'", "'and'", "'&'", "'xor'", "'or'", 
		"'|'", "'implies'", "'->'", "'provided'", "','", "';'", "':'", "'+oo'", 
		"'-oo'", "'(|'", "'|)'", "'['", "']T'", "']'", "'('", "')'", "'{'", "'}'", 
		"'log('", "'sqrt('", "'cbrt('", "'sqr('", "'ln('", "'sin('", "'cos('", 
		"'tan('", "'cotan('", "'cot('", "'sec('", "'cosec('", "'csc('", "'arcsin('", 
		"'arccos('", "'arctan('", "'arccotan('", "'arcsec('", "'arccosec('", "'arccsc('", 
		"'acsc('", "'asin('", "'acos('", "'atan('", "'acotan('", "'asec('", "'acosec('", 
		"'acot('", "'arccot('", "'sinh('", "'sh('", "'cosh('", "'ch('", "'tanh('", 
		"'th('", "'cotanh('", "'coth('", "'cth('", "'sech('", "'sch('", "'cosech('", 
		"'csch('", "'asinh('", "'arsinh('", "'arsh('", "'acosh('", "'arcosh('", 
		"'arch('", "'atanh('", "'artanh('", "'arth('", "'acoth('", "'arcoth('", 
		"'acotanh('", "'arcotanh('", "'arcth('", "'asech('", "'arsech('", "'arsch('", 
		"'acosech('", "'arcosech('", "'arcsch('", "'acsch('", "'gamma('", "'derivative('", 
		"'integral('", "'limit('", "'limitleft('", "'limitright('", "'signum('", 
		"'sgn('", "'sign('", "'abs('", "'phi('", "'domain('", "'piecewise('", 
		"'apply('", "'lambda('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NEWLINE", "NUMBER", "SPECIALSET", "BOOLEAN", "VARIABLE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AngouriMath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static AngouriMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    // Nullable reference type analysis is disabled by default for generated code without '#nullable enable'
	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngouriMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngouriMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class Factorial_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext p;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Factorial_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFactorial_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFactorial_expression(this);
		}
	}

	[RuleVersion(0)]
	public Factorial_expressionContext factorial_expression() {
		Factorial_expressionContext _localctx = new Factorial_expressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_factorial_expression);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; _localctx.p = atom();
				State = 51; Match(T__0);
				 _localctx.value =  MathS.Factorial(_localctx.p.value); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; _localctx.p = atom();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public Factorial_expressionContext _factorial_expression;
		public Unary_expressionContext _unary_expression;
		public Factorial_expressionContext[] factorial_expression() {
			return GetRuleContexts<Factorial_expressionContext>();
		}
		public Factorial_expressionContext factorial_expression(int i) {
			return GetRuleContext<Factorial_expressionContext>(i);
		}
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_power_list);
		 _localctx.value =  new(); 
		try {
			int _alt;
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 59; Match(T__1);
						State = 60; _localctx._factorial_expression = factorial_expression();
						 _localctx.value.Add(_localctx._factorial_expression.value); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 65;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 67; Match(T__1);
						State = 68; _localctx._unary_expression = unary_expression();
						 _localctx.value.Add(_localctx._unary_expression.value); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 73;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public Factorial_expressionContext _factorial_expression;
		public Power_listContext _power_list;
		public Factorial_expressionContext factorial_expression() {
			return GetRuleContext<Factorial_expressionContext>(0);
		}
		public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; _localctx._factorial_expression = factorial_expression();
			 _localctx.value =  _localctx._factorial_expression.value; 
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 79; _localctx._power_list = power_list();

				            _localctx.value =  _localctx._power_list.value
				                        .Prepend(_localctx._factorial_expression.value)
				                        .Reverse()
				                        .Aggregate((exp, @base) => @base.Pow(exp));
				        
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Unary_expressionContext u;
		public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary_expression);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 84; Match(T__2);
					State = 85; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value is Number num ? -num : -_localctx.p.value; 
					}
					break;
				case T__3:
					{
					State = 88; Match(T__3);
					State = 89; _localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 94; Match(T__2);
					State = 95; _localctx.u = unary_expression();
					 _localctx.value =  -_localctx.u.value; 
					}
					break;
				case T__3:
					{
					State = 98; Match(T__3);
					State = 99; _localctx.u = unary_expression();
					 _localctx.value =  _localctx.u.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; _localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; _localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__5) {
				{
				State = 119;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 111; Match(T__4);
					State = 112; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__5:
					{
					State = 115; Match(T__5);
					State = 116; _localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; _localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 126; Match(T__3);
					State = 127; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__2:
					{
					State = 130; Match(T__2);
					State = 131; _localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_intersectionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext left;
		public Sum_expressionContext right;
		public Sum_expressionContext[] sum_expression() {
			return GetRuleContexts<Sum_expressionContext>();
		}
		public Sum_expressionContext sum_expression(int i) {
			return GetRuleContext<Sum_expressionContext>(i);
		}
		public Set_operator_intersectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_intersection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_intersection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_intersection(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_intersectionContext set_operator_intersection() {
		Set_operator_intersectionContext _localctx = new Set_operator_intersectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_set_operator_intersection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; _localctx.left = sum_expression();
			 _localctx.value =  _localctx.left.value; 
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==T__7) {
				{
				State = 149;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 141; Match(T__6);
					State = 142; _localctx.right = sum_expression();
					 _localctx.value =  _localctx.value.Intersect(_localctx.right.value); 
					}
					break;
				case T__7:
					{
					State = 145; Match(T__7);
					State = 146; _localctx.right = sum_expression();
					 _localctx.value =  _localctx.value.Intersect(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_unionContext : ParserRuleContext {
		public Entity value;
		public Set_operator_intersectionContext left;
		public Set_operator_intersectionContext right;
		public Set_operator_intersectionContext[] set_operator_intersection() {
			return GetRuleContexts<Set_operator_intersectionContext>();
		}
		public Set_operator_intersectionContext set_operator_intersection(int i) {
			return GetRuleContext<Set_operator_intersectionContext>(i);
		}
		public Set_operator_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_union(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_union(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_unionContext set_operator_union() {
		Set_operator_unionContext _localctx = new Set_operator_unionContext(Context, State);
		EnterRule(_localctx, 14, RULE_set_operator_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; _localctx.left = set_operator_intersection();
			 _localctx.value =  _localctx.left.value; 
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__9) {
				{
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
					{
					State = 156; Match(T__8);
					State = 157; _localctx.right = set_operator_intersection();
					 _localctx.value =  _localctx.value.Unite(_localctx.right.value); 
					}
					break;
				case T__9:
					{
					State = 160; Match(T__9);
					State = 161; _localctx.right = set_operator_intersection();
					 _localctx.value =  _localctx.value.Unite(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_setsubtractionContext : ParserRuleContext {
		public Entity value;
		public Set_operator_unionContext left;
		public Set_operator_unionContext right;
		public Set_operator_unionContext[] set_operator_union() {
			return GetRuleContexts<Set_operator_unionContext>();
		}
		public Set_operator_unionContext set_operator_union(int i) {
			return GetRuleContext<Set_operator_unionContext>(i);
		}
		public Set_operator_setsubtractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_setsubtraction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_setsubtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_setsubtraction(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_setsubtractionContext set_operator_setsubtraction() {
		Set_operator_setsubtractionContext _localctx = new Set_operator_setsubtractionContext(Context, State);
		EnterRule(_localctx, 16, RULE_set_operator_setsubtraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; _localctx.left = set_operator_union();
			 _localctx.value =  _localctx.left.value; 
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10 || _la==T__11) {
				{
				State = 179;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__10:
					{
					State = 171; Match(T__10);
					State = 172; _localctx.right = set_operator_union();
					 _localctx.value =  _localctx.value.SetSubtract(_localctx.right.value); 
					}
					break;
				case T__11:
					{
					State = 175; Match(T__11);
					State = 176; _localctx.right = set_operator_union();
					 _localctx.value =  _localctx.value.SetSubtract(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class In_operatorContext : ParserRuleContext {
		public Entity value;
		public Set_operator_setsubtractionContext m1;
		public Set_operator_setsubtractionContext m2;
		public Set_operator_setsubtractionContext[] set_operator_setsubtraction() {
			return GetRuleContexts<Set_operator_setsubtractionContext>();
		}
		public Set_operator_setsubtractionContext set_operator_setsubtraction(int i) {
			return GetRuleContext<Set_operator_setsubtractionContext>(i);
		}
		public In_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterIn_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitIn_operator(this);
		}
	}

	[RuleVersion(0)]
	public In_operatorContext in_operator() {
		In_operatorContext _localctx = new In_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_in_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; _localctx.m1 = set_operator_setsubtraction();
			 _localctx.value =  _localctx.m1.value; 
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 186; Match(T__12);
				State = 187; _localctx.m2 = set_operator_setsubtraction();
				 _localctx.value =  _localctx.value.In(_localctx.m2.value); 
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Inequality_expressionContext : ParserRuleContext {
		public Entity value;
		public In_operatorContext m1;
		public In_operatorContext m2;
		public In_operatorContext[] in_operator() {
			return GetRuleContexts<In_operatorContext>();
		}
		public In_operatorContext in_operator(int i) {
			return GetRuleContext<In_operatorContext>(i);
		}
		public Inequality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inequality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInequality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInequality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inequality_expressionContext inequality_expression() {
		Inequality_expressionContext _localctx = new Inequality_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_inequality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; _localctx.m1 = in_operator();
			 _localctx.value =  _localctx.m1.value; 
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) {
				{
				State = 217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
					{
					State = 197; Match(T__13);
					State = 198; _localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value >= _localctx.m2.value; 
					}
					break;
				case T__14:
					{
					State = 201; Match(T__14);
					State = 202; _localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value <= _localctx.m2.value; 
					}
					break;
				case T__15:
					{
					State = 205; Match(T__15);
					State = 206; _localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value > _localctx.m2.value; 
					}
					break;
				case T__16:
					{
					State = 209; Match(T__16);
					State = 210; _localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value < _localctx.m2.value; 
					}
					break;
				case T__17:
					{
					State = 213; Match(T__17);
					State = 214; _localctx.m2 = in_operator();
					 _localctx.value =  MathS.Equality(_localctx.value, _localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Terms_listContext : ParserRuleContext {
		public List<Entity> terms;
		public Inequality_expressionContext term;
		public Inequality_expressionContext[] inequality_expression() {
			return GetRuleContexts<Inequality_expressionContext>();
		}
		public Inequality_expressionContext inequality_expression(int i) {
			return GetRuleContext<Inequality_expressionContext>(i);
		}
		public Terms_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterTerms_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitTerms_list(this);
		}
	}

	[RuleVersion(0)]
	public Terms_listContext terms_list() {
		Terms_listContext _localctx = new Terms_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_terms_list);
		 _localctx.terms =  new(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 222; Match(T__18);
				State = 223; _localctx.term = inequality_expression();
				 _localctx.terms.Add(_localctx.term.value); 
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Equality_expressionContext : ParserRuleContext {
		public Entity value;
		public Inequality_expressionContext expr;
		public Terms_listContext _terms_list;
		public Inequality_expressionContext inequality_expression() {
			return GetRuleContext<Inequality_expressionContext>(0);
		}
		public Terms_listContext terms_list() {
			return GetRuleContext<Terms_listContext>(0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; _localctx.expr = inequality_expression();
			 _localctx.value =  _localctx.expr.value; 
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 232; _localctx._terms_list = terms_list();

				        var list = _localctx._terms_list.terms.Prepend(_localctx.value).ToArray();
				        List<Entity> eqTerms = new();
				        for (int i = 0; i < list.Length - 1; i++)
				            eqTerms.Add(list[i].Equalizes(list[i + 1]));
				        _localctx.value =  eqTerms.Aggregate((eq1, eq2) => eq1 & eq2);
				    
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Negate_expressionContext : ParserRuleContext {
		public Entity value;
		public Equality_expressionContext op;
		public Negate_expressionContext opn;
		public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		public Negate_expressionContext negate_expression() {
			return GetRuleContext<Negate_expressionContext>(0);
		}
		public Negate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negate_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterNegate_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitNegate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Negate_expressionContext negate_expression() {
		Negate_expressionContext _localctx = new Negate_expressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_negate_expression);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; Match(T__19);
				State = 238; _localctx.op = equality_expression();
				 _localctx.value =  !_localctx.op.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; Match(T__19);
				State = 242; _localctx.opn = negate_expression();
				 _localctx.value =  !_localctx.opn.value; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245; _localctx.op = equality_expression();
				 _localctx.value =  _localctx.op.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class And_expressionContext : ParserRuleContext {
		public Entity value;
		public Negate_expressionContext m1;
		public Negate_expressionContext m2;
		public Negate_expressionContext[] negate_expression() {
			return GetRuleContexts<Negate_expressionContext>();
		}
		public Negate_expressionContext negate_expression(int i) {
			return GetRuleContext<Negate_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; _localctx.m1 = negate_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20 || _la==T__21) {
				{
				State = 260;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__20:
					{
					State = 252; Match(T__20);
					State = 253; _localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				case T__21:
					{
					State = 256; Match(T__21);
					State = 257; _localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Xor_expressionContext : ParserRuleContext {
		public Entity value;
		public And_expressionContext m1;
		public And_expressionContext m2;
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Xor_expressionContext xor_expression() {
		Xor_expressionContext _localctx = new Xor_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265; _localctx.m1 = and_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 267; Match(T__22);
				State = 268; _localctx.m2 = and_expression();
				 _localctx.value =  _localctx.value ^ _localctx.m2.value; 
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Or_expressionContext : ParserRuleContext {
		public Entity value;
		public Xor_expressionContext m1;
		public Xor_expressionContext m2;
		public Xor_expressionContext[] xor_expression() {
			return GetRuleContexts<Xor_expressionContext>();
		}
		public Xor_expressionContext xor_expression(int i) {
			return GetRuleContext<Xor_expressionContext>(i);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; _localctx.m1 = xor_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || _la==T__24) {
				{
				State = 286;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__23:
					{
					State = 278; Match(T__23);
					State = 279; _localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				case T__24:
					{
					State = 282; Match(T__24);
					State = 283; _localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Implies_expressionContext : ParserRuleContext {
		public Entity value;
		public Or_expressionContext m1;
		public Or_expressionContext m2;
		public Or_expressionContext[] or_expression() {
			return GetRuleContexts<Or_expressionContext>();
		}
		public Or_expressionContext or_expression(int i) {
			return GetRuleContext<Or_expressionContext>(i);
		}
		public Implies_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implies_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterImplies_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitImplies_expression(this);
		}
	}

	[RuleVersion(0)]
	public Implies_expressionContext implies_expression() {
		Implies_expressionContext _localctx = new Implies_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_implies_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; _localctx.m1 = or_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25 || _la==T__26) {
				{
				State = 301;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__25:
					{
					State = 293; Match(T__25);
					State = 294; _localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				case T__26:
					{
					State = 297; Match(T__26);
					State = 298; _localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Provided_expressionContext : ParserRuleContext {
		public Entity value;
		public Implies_expressionContext expr;
		public Implies_expressionContext pred;
		public Implies_expressionContext[] implies_expression() {
			return GetRuleContexts<Implies_expressionContext>();
		}
		public Implies_expressionContext implies_expression(int i) {
			return GetRuleContext<Implies_expressionContext>(i);
		}
		public Provided_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_provided_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterProvided_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitProvided_expression(this);
		}
	}

	[RuleVersion(0)]
	public Provided_expressionContext provided_expression() {
		Provided_expressionContext _localctx = new Provided_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_provided_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; _localctx.expr = implies_expression();
			 _localctx.value =  _localctx.expr.value; 
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27) {
				{
				{
				State = 308; Match(T__27);
				State = 309; _localctx.pred = implies_expression();
				 _localctx.value =  _localctx.value.Provided(_localctx.pred.value); 
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Provided_expressionContext s;
		public Provided_expressionContext provided_expression() {
			return GetRuleContext<Provided_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; _localctx.s = provided_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_arguments);
		 _localctx.list =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__19) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__35) | (1L << T__38) | (1L << T__40) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59) | (1L << T__60) | (1L << T__61) | (1L << T__62))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (T__63 - 64)) | (1L << (T__64 - 64)) | (1L << (T__65 - 64)) | (1L << (T__66 - 64)) | (1L << (T__67 - 64)) | (1L << (T__68 - 64)) | (1L << (T__69 - 64)) | (1L << (T__70 - 64)) | (1L << (T__71 - 64)) | (1L << (T__72 - 64)) | (1L << (T__73 - 64)) | (1L << (T__74 - 64)) | (1L << (T__75 - 64)) | (1L << (T__76 - 64)) | (1L << (T__77 - 64)) | (1L << (T__78 - 64)) | (1L << (T__79 - 64)) | (1L << (T__80 - 64)) | (1L << (T__81 - 64)) | (1L << (T__82 - 64)) | (1L << (T__83 - 64)) | (1L << (T__84 - 64)) | (1L << (T__85 - 64)) | (1L << (T__86 - 64)) | (1L << (T__87 - 64)) | (1L << (T__88 - 64)) | (1L << (T__89 - 64)) | (1L << (T__90 - 64)) | (1L << (T__91 - 64)) | (1L << (T__92 - 64)) | (1L << (T__93 - 64)) | (1L << (T__94 - 64)) | (1L << (T__95 - 64)) | (1L << (T__96 - 64)) | (1L << (T__97 - 64)) | (1L << (T__98 - 64)) | (1L << (T__99 - 64)) | (1L << (T__100 - 64)) | (1L << (T__101 - 64)) | (1L << (T__102 - 64)) | (1L << (T__103 - 64)) | (1L << (T__104 - 64)) | (1L << (T__105 - 64)) | (1L << (T__106 - 64)) | (1L << (T__107 - 64)) | (1L << (T__108 - 64)) | (1L << (T__109 - 64)) | (1L << (T__110 - 64)) | (1L << (T__111 - 64)) | (1L << (T__112 - 64)) | (1L << (T__113 - 64)) | (1L << (T__114 - 64)) | (1L << (T__115 - 64)) | (1L << (T__116 - 64)) | (1L << (T__117 - 64)) | (1L << (T__118 - 64)) | (1L << (T__119 - 64)) | (1L << (NUMBER - 64)) | (1L << (SPECIALSET - 64)) | (1L << (BOOLEAN - 64)) | (1L << (VARIABLE - 64)))) != 0)) {
				{
				State = 320; _localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__28) {
					{
					{
					State = 322; Match(T__28);
					State = 323; _localctx.e = expression();
					 _localctx.list.Add(_localctx.e.value); 
					}
					}
					State = 330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Interval_argumentsContext : ParserRuleContext {
		public (Entity from, Entity to) couple;
		public ExpressionContext from;
		public ExpressionContext to;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Interval_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInterval_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInterval_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Interval_argumentsContext interval_arguments() {
		Interval_argumentsContext _localctx = new Interval_argumentsContext(Context, State);
		EnterRule(_localctx, 42, RULE_interval_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; _localctx.from = expression();
			 _localctx.couple.from = _localctx.from.value; 
			State = 335; Match(T__29);
			State = 336; _localctx.to = expression();
			 _localctx.couple.to = _localctx.to.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Cset_argumentsContext : ParserRuleContext {
		public (Entity variable, Entity predicate) couple;
		public ExpressionContext variable;
		public ExpressionContext predicate;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Cset_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cset_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterCset_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitCset_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Cset_argumentsContext cset_arguments() {
		Cset_argumentsContext _localctx = new Cset_argumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_cset_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; _localctx.variable = expression();
			 _localctx.couple.variable = _localctx.variable.value; 
			State = 341; Match(T__30);
			State = 342; _localctx.predicate = expression();
			 _localctx.couple.predicate = _localctx.predicate.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _BOOLEAN;
		public IToken _SPECIALSET;
		public IToken _VARIABLE;
		public ExpressionContext _expression;
		public Function_argumentsContext _function_arguments;
		public Interval_argumentsContext _interval_arguments;
		public Cset_argumentsContext cset_args;
		public Function_argumentsContext args;
		public ITerminalNode NUMBER() { return GetToken(AngouriMathParser.NUMBER, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(AngouriMathParser.BOOLEAN, 0); }
		public ITerminalNode SPECIALSET() { return GetToken(AngouriMathParser.SPECIALSET, 0); }
		public ITerminalNode VARIABLE() { return GetToken(AngouriMathParser.VARIABLE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public Interval_argumentsContext interval_arguments() {
			return GetRuleContext<Interval_argumentsContext>(0);
		}
		public Cset_argumentsContext cset_arguments() {
			return GetRuleContext<Cset_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 46, RULE_atom);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; Match(T__31);
				 _localctx.value =  Entity.Number.Real.PositiveInfinity; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; Match(T__32);
				 _localctx.value =  Entity.Number.Real.NegativeInfinity; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349; _localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Entity.Number.Complex.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; _localctx._BOOLEAN = Match(BOOLEAN);
				 _localctx.value =  Entity.Boolean.Parse((_localctx._BOOLEAN!=null?_localctx._BOOLEAN.Text:null)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 353; _localctx._SPECIALSET = Match(SPECIALSET);
				 _localctx.value =  Entity.Set.SpecialSet.Create((_localctx._SPECIALSET!=null?_localctx._SPECIALSET.Text:null)); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 355; _localctx._VARIABLE = Match(VARIABLE);
				 _localctx.value =  Entity.Variable.CreateVariableUnchecked((_localctx._VARIABLE!=null?_localctx._VARIABLE.Text:null)); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 357; Match(T__33);
				State = 358; _localctx._expression = expression();
				State = 359; Match(T__34);
				 _localctx.value =  _localctx._expression.value.Abs(); 
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 362; Match(T__35);
				State = 363; _localctx._function_arguments = function_arguments();
				State = 364; Match(T__36);
				 _localctx.value =  ParsingHelpers.TryBuildingMatrix(_localctx._function_arguments.list).T; 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 367; Match(T__35);
				State = 368; _localctx._function_arguments = function_arguments();
				State = 369; Match(T__37);
				 _localctx.value =  ParsingHelpers.TryBuildingMatrix(_localctx._function_arguments.list); 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 372; Match(T__38);
				State = 373; _localctx._interval_arguments = interval_arguments();
				State = 374; Match(T__39);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, false, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 377; Match(T__35);
				State = 378; _localctx._interval_arguments = interval_arguments();
				State = 379; Match(T__39);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 382; Match(T__35);
				State = 383; _localctx._interval_arguments = interval_arguments();
				State = 384; Match(T__37);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 387; Match(T__38);
				State = 388; _localctx._interval_arguments = interval_arguments();
				State = 389; Match(T__37);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, false, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 392; Match(T__38);
				State = 393; _localctx._expression = expression();
				State = 394; Match(T__39);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 397; Match(T__40);
				State = 398; _localctx.cset_args = cset_arguments();
				State = 399; Match(T__41);
				 _localctx.value =  new ConditionalSet(_localctx.cset_args.couple.variable, _localctx.cset_args.couple.predicate); 
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 402; Match(T__40);
				State = 403; _localctx.args = function_arguments();
				State = 404; Match(T__41);
				 _localctx.value =  new FiniteSet((IEnumerable<Entity>)_localctx.args.list); 
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 407; Match(T__42);
				State = 408; _localctx.args = function_arguments();
				State = 409; Match(T__39);
				 _localctx.value =  Assert("log", (1, 2), _localctx.args.list.Count) ? MathS.Log(10, _localctx.args.list[0]) : MathS.Log(_localctx.args.list[0], _localctx.args.list[1]); 
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 412; Match(T__43);
				State = 413; _localctx.args = function_arguments();
				State = 414; Match(T__39);
				 Assert("sqrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqrt(_localctx.args.list[0]); 
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 417; Match(T__44);
				State = 418; _localctx.args = function_arguments();
				State = 419; Match(T__39);
				 Assert("cbrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cbrt(_localctx.args.list[0]); 
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 422; Match(T__45);
				State = 423; _localctx.args = function_arguments();
				State = 424; Match(T__39);
				 Assert("sqr", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqr(_localctx.args.list[0]); 
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 427; Match(T__46);
				State = 428; _localctx.args = function_arguments();
				State = 429; Match(T__39);
				 Assert("ln", 1, _localctx.args.list.Count); _localctx.value =  MathS.Ln(_localctx.args.list[0]); 
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 432; Match(T__47);
				State = 433; _localctx.args = function_arguments();
				State = 434; Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sin(_localctx.args.list[0]); 
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 437; Match(T__48);
				State = 438; _localctx.args = function_arguments();
				State = 439; Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cos(_localctx.args.list[0]); 
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 442; Match(T__49);
				State = 443; _localctx.args = function_arguments();
				State = 444; Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Tan(_localctx.args.list[0]); 
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 447; Match(T__50);
				State = 448; _localctx.args = function_arguments();
				State = 449; Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 452; Match(T__51);
				State = 453; _localctx.args = function_arguments();
				State = 454; Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 457; Match(T__52);
				State = 458; _localctx.args = function_arguments();
				State = 459; Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sec(_localctx.args.list[0]); 
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 462; Match(T__53);
				State = 463; _localctx.args = function_arguments();
				State = 464; Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 467; Match(T__54);
				State = 468; _localctx.args = function_arguments();
				State = 469; Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 472; Match(T__55);
				State = 473; _localctx.args = function_arguments();
				State = 474; Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 477; Match(T__56);
				State = 478; _localctx.args = function_arguments();
				State = 479; Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 482; Match(T__57);
				State = 483; _localctx.args = function_arguments();
				State = 484; Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 487; Match(T__58);
				State = 488; _localctx.args = function_arguments();
				State = 489; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 492; Match(T__59);
				State = 493; _localctx.args = function_arguments();
				State = 494; Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 497; Match(T__60);
				State = 498; _localctx.args = function_arguments();
				State = 499; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 502; Match(T__61);
				State = 503; _localctx.args = function_arguments();
				State = 504; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 507; Match(T__62);
				State = 508; _localctx.args = function_arguments();
				State = 509; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 512; Match(T__63);
				State = 513; _localctx.args = function_arguments();
				State = 514; Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 517; Match(T__64);
				State = 518; _localctx.args = function_arguments();
				State = 519; Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 522; Match(T__65);
				State = 523; _localctx.args = function_arguments();
				State = 524; Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 527; Match(T__66);
				State = 528; _localctx.args = function_arguments();
				State = 529; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 532; Match(T__67);
				State = 533; _localctx.args = function_arguments();
				State = 534; Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 537; Match(T__68);
				State = 538; _localctx.args = function_arguments();
				State = 539; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 542; Match(T__69);
				State = 543; _localctx.args = function_arguments();
				State = 544; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 547; Match(T__70);
				State = 548; _localctx.args = function_arguments();
				State = 549; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 552; Match(T__71);
				State = 553; _localctx.args = function_arguments();
				State = 554; Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sinh(_localctx.args.list[0]); 
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 557; Match(T__72);
				State = 558; _localctx.args = function_arguments();
				State = 559; Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sinh(_localctx.args.list[0]); 
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 562; Match(T__73);
				State = 563; _localctx.args = function_arguments();
				State = 564; Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosh(_localctx.args.list[0]); 
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 567; Match(T__74);
				State = 568; _localctx.args = function_arguments();
				State = 569; Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosh(_localctx.args.list[0]); 
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 572; Match(T__75);
				State = 573; _localctx.args = function_arguments();
				State = 574; Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Tanh(_localctx.args.list[0]); 
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 577; Match(T__76);
				State = 578; _localctx.args = function_arguments();
				State = 579; Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Tanh(_localctx.args.list[0]); 
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 582; Match(T__77);
				State = 583; _localctx.args = function_arguments();
				State = 584; Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 587; Match(T__78);
				State = 588; _localctx.args = function_arguments();
				State = 589; Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 592; Match(T__79);
				State = 593; _localctx.args = function_arguments();
				State = 594; Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 597; Match(T__80);
				State = 598; _localctx.args = function_arguments();
				State = 599; Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sech(_localctx.args.list[0]); 
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 602; Match(T__81);
				State = 603; _localctx.args = function_arguments();
				State = 604; Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sech(_localctx.args.list[0]); 
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 607; Match(T__82);
				State = 608; _localctx.args = function_arguments();
				State = 609; Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosech(_localctx.args.list[0]); 
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 612; Match(T__83);
				State = 613; _localctx.args = function_arguments();
				State = 614; Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosech(_localctx.args.list[0]); 
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 617; Match(T__84);
				State = 618; _localctx.args = function_arguments();
				State = 619; Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 622; Match(T__85);
				State = 623; _localctx.args = function_arguments();
				State = 624; Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 627; Match(T__86);
				State = 628; _localctx.args = function_arguments();
				State = 629; Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 632; Match(T__87);
				State = 633; _localctx.args = function_arguments();
				State = 634; Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 637; Match(T__88);
				State = 638; _localctx.args = function_arguments();
				State = 639; Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 642; Match(T__89);
				State = 643; _localctx.args = function_arguments();
				State = 644; Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 647; Match(T__90);
				State = 648; _localctx.args = function_arguments();
				State = 649; Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 652; Match(T__91);
				State = 653; _localctx.args = function_arguments();
				State = 654; Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 657; Match(T__92);
				State = 658; _localctx.args = function_arguments();
				State = 659; Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 662; Match(T__93);
				State = 663; _localctx.args = function_arguments();
				State = 664; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 667; Match(T__94);
				State = 668; _localctx.args = function_arguments();
				State = 669; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 672; Match(T__95);
				State = 673; _localctx.args = function_arguments();
				State = 674; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 677; Match(T__96);
				State = 678; _localctx.args = function_arguments();
				State = 679; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 682; Match(T__97);
				State = 683; _localctx.args = function_arguments();
				State = 684; Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 687; Match(T__98);
				State = 688; _localctx.args = function_arguments();
				State = 689; Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 692; Match(T__99);
				State = 693; _localctx.args = function_arguments();
				State = 694; Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 697; Match(T__100);
				State = 698; _localctx.args = function_arguments();
				State = 699; Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 702; Match(T__101);
				State = 703; _localctx.args = function_arguments();
				State = 704; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 707; Match(T__102);
				State = 708; _localctx.args = function_arguments();
				State = 709; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 712; Match(T__103);
				State = 713; _localctx.args = function_arguments();
				State = 714; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 717; Match(T__104);
				State = 718; _localctx.args = function_arguments();
				State = 719; Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 722; Match(T__105);
				State = 723; _localctx.args = function_arguments();
				State = 724; Match(T__39);
				 Assert("gamma", 1, _localctx.args.list.Count); _localctx.value =  MathS.Gamma(_localctx.args.list[0]); 
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 727; Match(T__106);
				State = 728; _localctx.args = function_arguments();
				State = 729; Match(T__39);

				            if (Assert("derivative", (3, 2), _localctx.args.list.Count))
				            {
				                if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                    _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				                else
				                    throw new InvalidArgumentParseException("Expected integer number for the third argument of derivative");
				            } 
				            else
				                _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1]);
				        
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 732; Match(T__107);
				State = 733; _localctx.args = function_arguments();
				State = 734; Match(T__39);
				 
				            if (Assert("integral", (3, 2), _localctx.args.list.Count))
				            {
				                if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                    _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				                else
				                    throw new InvalidArgumentParseException("Expected number for the third argument of integral");
				            }
				            else
				                _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1]);
				        
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 737; Match(T__108);
				State = 738; _localctx.args = function_arguments();
				State = 739; Match(T__39);
				 Assert("limit", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 742; Match(T__109);
				State = 743; _localctx.args = function_arguments();
				State = 744; Match(T__39);
				 Assert("limitleft", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Left); 
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 747; Match(T__110);
				State = 748; _localctx.args = function_arguments();
				State = 749; Match(T__39);
				 Assert("limitright", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Right); 
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 752; Match(T__111);
				State = 753; _localctx.args = function_arguments();
				State = 754; Match(T__39);
				 Assert("signum", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 757; Match(T__112);
				State = 758; _localctx.args = function_arguments();
				State = 759; Match(T__39);
				 Assert("sgn", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 762; Match(T__113);
				State = 763; _localctx.args = function_arguments();
				State = 764; Match(T__39);
				 Assert("sign", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 767; Match(T__114);
				State = 768; _localctx.args = function_arguments();
				State = 769; Match(T__39);
				 Assert("abs", 1, _localctx.args.list.Count); _localctx.value =  MathS.Abs(_localctx.args.list[0]); 
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 772; Match(T__115);
				State = 773; _localctx.args = function_arguments();
				State = 774; Match(T__39);
				 Assert("phi", 1, _localctx.args.list.Count); _localctx.value =  MathS.NumberTheory.Phi(_localctx.args.list[0]); 
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 777; Match(T__116);
				State = 778; _localctx.args = function_arguments();
				State = 779; Match(T__39);
				 
				            Assert("domain", 2, _localctx.args.list.Count); 
				            if (_localctx.args.list[1] is not SpecialSet ss)
				                throw new InvalidArgumentParseException($"Unrecognized special set {_localctx.args.list[1].Stringize()}");
				            _localctx.value =  _localctx.args.list[0].WithCodomain(ss.ToDomain());
				        
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 782; Match(T__117);
				State = 783; _localctx.args = function_arguments();
				State = 784; Match(T__39);

				            var cases = new List<Providedf>();
				            foreach (var arg in _localctx.args.list)
				                if (arg is Providedf provided)
				                    cases.Add(provided);
				                else
				                    cases.Add(new Providedf(arg, true));
				            _localctx.value =  new Piecewise(cases);
				        
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 787; Match(T__118);
				State = 788; _localctx.args = function_arguments();
				State = 789; Match(T__39);

				            if (_localctx.args.list.Count < 2)
				                throw new FunctionArgumentCountException("Should be at least one argument in apply function");
				            _localctx.value =  _localctx.args.list[0].Apply(_localctx.args.list.Skip(1).ToLList());
				        
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 792; Match(T__119);
				State = 793; _localctx.args = function_arguments();
				State = 794; Match(T__39);

				            if (_localctx.args.list.Count < 2)
				                throw new FunctionArgumentCountException("Should be at least two arguments in lambda function");
				            var body = _localctx.args.list.Last();
				            foreach (var x in ((IEnumerable<Entity>)_localctx.args.list).Reverse().Skip(1))
				            {
				                if (x is not Variable v) throw new InvalidArgumentParseException($"Lambda is expected to have valid parameters, {x} encountered instead");
				                body = body.LambdaOver(v);
				            }
				            _localctx.value =  body;
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(AngouriMathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; _localctx._expression = expression();
			State = 800; Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x81', '\x326', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '<', '\n', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x42', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\x43', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', 'J', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', 'K', '\x5', '\x3', 'N', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'U', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '_', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'i', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'n', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'z', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '}', '\v', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'\x89', '\n', '\a', '\f', '\a', '\xE', '\a', '\x8C', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x98', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\x9B', '\v', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xA7', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xAA', '\v', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xB6', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\xB9', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xC1', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xC4', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xDC', '\n', '\f', '\f', '\f', '\xE', '\f', '\xDF', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', '\xE5', '\n', 
		'\r', '\r', '\r', '\xE', '\r', '\xE6', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xEE', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xFB', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x107', 
		'\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x10A', '\v', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\x112', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\x115', '\v', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x121', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x124', '\v', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x130', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x133', '\v', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', 
		'\x14', '\x13B', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x13E', '\v', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x149', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x14C', '\v', 
		'\x16', '\x5', '\x16', '\x14E', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x320', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', 
		'\x2', '\x1B', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x2', '\x2', '\x2', '\x390', '\x2', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'M', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'O', '\x3', '\x2', '\x2', '\x2', '\b', 'm', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'o', '\x3', '\x2', '\x2', '\x2', '\f', '~', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\x16', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\xE4', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xE8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', ' ', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\x116', '\x3', '\x2', '\x2', '\x2', '$', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x134', '\x3', '\x2', '\x2', '\x2', '(', '\x13F', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		',', '\x14F', '\x3', '\x2', '\x2', '\x2', '.', '\x155', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x32', '\x321', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x30', '\x19', '\x2', 
		'\x35', '\x36', '\a', '\x3', '\x2', '\x2', '\x36', '\x37', '\b', '\x2', 
		'\x1', '\x2', '\x37', '<', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\x5', '\x30', '\x19', '\x2', '\x39', ':', '\b', '\x2', '\x1', '\x2', 
		':', '<', '\x3', '\x2', '\x2', '\x2', ';', '\x34', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '=', '>', '\a', '\x4', '\x2', '\x2', '>', '?', '\x5', '\x2', 
		'\x2', '\x2', '?', '@', '\b', '\x3', '\x1', '\x2', '@', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', 'N', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\a', '\x4', '\x2', '\x2', '\x46', 
		'G', '\x5', '\b', '\x5', '\x2', 'G', 'H', '\b', '\x3', '\x1', '\x2', 'H', 
		'J', '\x3', '\x2', '\x2', '\x2', 'I', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 
		'M', '\x41', '\x3', '\x2', '\x2', '\x2', 'M', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'N', '\x5', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\x2', 
		'\x2', '\x2', 'P', 'T', '\b', '\x4', '\x1', '\x2', 'Q', 'R', '\x5', '\x4', 
		'\x3', '\x2', 'R', 'S', '\b', '\x4', '\x1', '\x2', 'S', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'U', '\a', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\x5', 
		'\x2', '\x2', 'W', 'X', '\x5', '\x6', '\x4', '\x2', 'X', 'Y', '\b', '\x5', 
		'\x1', '\x2', 'Y', '_', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '\x6', 
		'\x2', '\x2', '[', '\\', '\x5', '\x6', '\x4', '\x2', '\\', ']', '\b', 
		'\x5', '\x1', '\x2', ']', '_', '\x3', '\x2', '\x2', '\x2', '^', 'V', '\x3', 
		'\x2', '\x2', '\x2', '^', 'Z', '\x3', '\x2', '\x2', '\x2', '_', 'n', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\a', '\x5', '\x2', '\x2', '\x61', '\x62', 
		'\x5', '\b', '\x5', '\x2', '\x62', '\x63', '\b', '\x5', '\x1', '\x2', 
		'\x63', 'i', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x6', 
		'\x2', '\x2', '\x65', '\x66', '\x5', '\b', '\x5', '\x2', '\x66', 'g', 
		'\b', '\x5', '\x1', '\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', 
		'`', '\x3', '\x2', '\x2', '\x2', 'h', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'i', 'n', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', '\x6', '\x4', '\x2', 
		'k', 'l', '\b', '\x5', '\x1', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 
		'm', '^', '\x3', '\x2', '\x2', '\x2', 'm', 'h', '\x3', '\x2', '\x2', '\x2', 
		'm', 'j', '\x3', '\x2', '\x2', '\x2', 'n', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x5', '\b', '\x5', '\x2', 'p', '{', '\b', '\x6', '\x1', 
		'\x2', 'q', 'r', '\a', '\a', '\x2', '\x2', 'r', 's', '\x5', '\b', '\x5', 
		'\x2', 's', 't', '\b', '\x6', '\x1', '\x2', 't', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 'v', 'w', '\x5', '\b', '\x5', 
		'\x2', 'w', 'x', '\b', '\x6', '\x1', '\x2', 'x', 'z', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'q', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', 
		'\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', '|', '\v', '\x3', '\x2', 
		'\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x5', 
		'\n', '\x6', '\x2', '\x7F', '\x8A', '\b', '\a', '\x1', '\x2', '\x80', 
		'\x81', '\a', '\x6', '\x2', '\x2', '\x81', '\x82', '\x5', '\n', '\x6', 
		'\x2', '\x82', '\x83', '\b', '\a', '\x1', '\x2', '\x83', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\x5', '\x2', '\x2', '\x85', 
		'\x86', '\x5', '\n', '\x6', '\x2', '\x86', '\x87', '\b', '\a', '\x1', 
		'\x2', '\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x84', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\f', '\a', '\x2', '\x8E', '\x99', '\b', '\b', '\x1', '\x2', 
		'\x8F', '\x90', '\a', '\t', '\x2', '\x2', '\x90', '\x91', '\x5', '\f', 
		'\a', '\x2', '\x91', '\x92', '\b', '\b', '\x1', '\x2', '\x92', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\n', '\x2', '\x2', 
		'\x94', '\x95', '\x5', '\f', '\a', '\x2', '\x95', '\x96', '\b', '\b', 
		'\x1', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', '\x2', '\x97', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x97', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x9D', '\x5', '\xE', '\b', '\x2', '\x9D', '\xA8', '\b', '\t', 
		'\x1', '\x2', '\x9E', '\x9F', '\a', '\v', '\x2', '\x2', '\x9F', '\xA0', 
		'\x5', '\xE', '\b', '\x2', '\xA0', '\xA1', '\b', '\t', '\x1', '\x2', '\xA1', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', '\f', '\x2', 
		'\x2', '\xA3', '\xA4', '\x5', '\xE', '\b', '\x2', '\xA4', '\xA5', '\b', 
		'\t', '\x1', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\x5', '\x10', '\t', '\x2', '\xAC', '\xB7', '\b', 
		'\n', '\x1', '\x2', '\xAD', '\xAE', '\a', '\r', '\x2', '\x2', '\xAE', 
		'\xAF', '\x5', '\x10', '\t', '\x2', '\xAF', '\xB0', '\b', '\n', '\x1', 
		'\x2', '\xB0', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\a', 
		'\xE', '\x2', '\x2', '\xB2', '\xB3', '\x5', '\x10', '\t', '\x2', '\xB3', 
		'\xB4', '\b', '\n', '\x1', '\x2', '\xB4', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBB', '\x5', '\x12', '\n', '\x2', '\xBB', 
		'\xC2', '\b', '\v', '\x1', '\x2', '\xBC', '\xBD', '\a', '\xF', '\x2', 
		'\x2', '\xBD', '\xBE', '\x5', '\x12', '\n', '\x2', '\xBE', '\xBF', '\b', 
		'\v', '\x1', '\x2', '\xBF', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x14', '\v', 
		'\x2', '\xC6', '\xDD', '\b', '\f', '\x1', '\x2', '\xC7', '\xC8', '\a', 
		'\x10', '\x2', '\x2', '\xC8', '\xC9', '\x5', '\x14', '\v', '\x2', '\xC9', 
		'\xCA', '\b', '\f', '\x1', '\x2', '\xCA', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\a', '\x11', '\x2', '\x2', '\xCC', '\xCD', '\x5', 
		'\x14', '\v', '\x2', '\xCD', '\xCE', '\b', '\f', '\x1', '\x2', '\xCE', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x12', '\x2', 
		'\x2', '\xD0', '\xD1', '\x5', '\x14', '\v', '\x2', '\xD1', '\xD2', '\b', 
		'\f', '\x1', '\x2', '\xD2', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD4', '\a', '\x13', '\x2', '\x2', '\xD4', '\xD5', '\x5', '\x14', '\v', 
		'\x2', '\xD5', '\xD6', '\b', '\f', '\x1', '\x2', '\xD6', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x14', '\x2', '\x2', '\xD8', 
		'\xD9', '\x5', '\x14', '\v', '\x2', '\xD9', '\xDA', '\b', '\f', '\x1', 
		'\x2', '\xDA', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xDB', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', 
		'\x15', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x16', '\f', '\x2', '\xE2', 
		'\xE3', '\b', '\r', '\x1', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE7', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', '\x16', '\f', '\x2', '\xE9', '\xED', '\b', 
		'\xE', '\x1', '\x2', '\xEA', '\xEB', '\x5', '\x18', '\r', '\x2', '\xEB', 
		'\xEC', '\b', '\xE', '\x1', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\x16', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x1A', '\xE', 
		'\x2', '\xF1', '\xF2', '\b', '\xF', '\x1', '\x2', '\xF2', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x16', '\x2', '\x2', '\xF4', 
		'\xF5', '\x5', '\x1C', '\xF', '\x2', '\xF5', '\xF6', '\b', '\xF', '\x1', 
		'\x2', '\xF6', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x5', 
		'\x1A', '\xE', '\x2', '\xF8', '\xF9', '\b', '\xF', '\x1', '\x2', '\xF9', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFD', '\x5', '\x1C', '\xF', '\x2', '\xFD', '\x108', '\b', '\x10', '\x1', 
		'\x2', '\xFE', '\xFF', '\a', '\x17', '\x2', '\x2', '\xFF', '\x100', '\x5', 
		'\x1C', '\xF', '\x2', '\x100', '\x101', '\b', '\x10', '\x1', '\x2', '\x101', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x18', '\x2', 
		'\x2', '\x103', '\x104', '\x5', '\x1C', '\xF', '\x2', '\x104', '\x105', 
		'\b', '\x10', '\x1', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x106', '\x102', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x5', '\x1E', '\x10', '\x2', 
		'\x10C', '\x113', '\b', '\x11', '\x1', '\x2', '\x10D', '\x10E', '\a', 
		'\x19', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x1E', '\x10', '\x2', 
		'\x10F', '\x110', '\b', '\x11', '\x1', '\x2', '\x110', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x5', ' ', '\x11', '\x2', '\x117', '\x122', '\b', '\x12', '\x1', 
		'\x2', '\x118', '\x119', '\a', '\x1A', '\x2', '\x2', '\x119', '\x11A', 
		'\x5', ' ', '\x11', '\x2', '\x11A', '\x11B', '\b', '\x12', '\x1', '\x2', 
		'\x11B', '\x121', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\a', 
		'\x1B', '\x2', '\x2', '\x11D', '\x11E', '\x5', ' ', '\x11', '\x2', '\x11E', 
		'\x11F', '\b', '\x12', '\x1', '\x2', '\x11F', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x118', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '#', '\x3', '\x2', '\x2', '\x2', '\x124', 
		'\x122', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x5', '\"', '\x12', 
		'\x2', '\x126', '\x131', '\b', '\x13', '\x1', '\x2', '\x127', '\x128', 
		'\a', '\x1C', '\x2', '\x2', '\x128', '\x129', '\x5', '\"', '\x12', '\x2', 
		'\x129', '\x12A', '\b', '\x13', '\x1', '\x2', '\x12A', '\x130', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x1D', '\x2', '\x2', '\x12C', 
		'\x12D', '\x5', '\"', '\x12', '\x2', '\x12D', '\x12E', '\b', '\x13', '\x1', 
		'\x2', '\x12E', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12B', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x133', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\x5', '$', '\x13', '\x2', '\x135', '\x13C', 
		'\b', '\x14', '\x1', '\x2', '\x136', '\x137', '\a', '\x1E', '\x2', '\x2', 
		'\x137', '\x138', '\x5', '$', '\x13', '\x2', '\x138', '\x139', '\b', '\x14', 
		'\x1', '\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', 
		'\x2', '\x2', '\x2', '\x13D', '\'', '\x3', '\x2', '\x2', '\x2', '\x13E', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x140', '\x5', '&', '\x14', 
		'\x2', '\x140', '\x141', '\b', '\x15', '\x1', '\x2', '\x141', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x5', '(', '\x15', '\x2', '\x143', 
		'\x14A', '\b', '\x16', '\x1', '\x2', '\x144', '\x145', '\a', '\x1F', '\x2', 
		'\x2', '\x145', '\x146', '\x5', '(', '\x15', '\x2', '\x146', '\x147', 
		'\b', '\x16', '\x1', '\x2', '\x147', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x144', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '+', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x5', '(', 
		'\x15', '\x2', '\x150', '\x151', '\b', '\x17', '\x1', '\x2', '\x151', 
		'\x152', '\a', ' ', '\x2', '\x2', '\x152', '\x153', '\x5', '(', '\x15', 
		'\x2', '\x153', '\x154', '\b', '\x17', '\x1', '\x2', '\x154', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x155', '\x156', '\x5', '(', '\x15', '\x2', '\x156', 
		'\x157', '\b', '\x18', '\x1', '\x2', '\x157', '\x158', '\a', '!', '\x2', 
		'\x2', '\x158', '\x159', '\x5', '(', '\x15', '\x2', '\x159', '\x15A', 
		'\b', '\x18', '\x1', '\x2', '\x15A', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x15B', '\x15C', '\a', '\"', '\x2', '\x2', '\x15C', '\x320', '\b', '\x19', 
		'\x1', '\x2', '\x15D', '\x15E', '\a', '#', '\x2', '\x2', '\x15E', '\x320', 
		'\b', '\x19', '\x1', '\x2', '\x15F', '\x160', '\a', '|', '\x2', '\x2', 
		'\x160', '\x320', '\b', '\x19', '\x1', '\x2', '\x161', '\x162', '\a', 
		'~', '\x2', '\x2', '\x162', '\x320', '\b', '\x19', '\x1', '\x2', '\x163', 
		'\x164', '\a', '}', '\x2', '\x2', '\x164', '\x320', '\b', '\x19', '\x1', 
		'\x2', '\x165', '\x166', '\a', '\x7F', '\x2', '\x2', '\x166', '\x320', 
		'\b', '\x19', '\x1', '\x2', '\x167', '\x168', '\a', '$', '\x2', '\x2', 
		'\x168', '\x169', '\x5', '(', '\x15', '\x2', '\x169', '\x16A', '\a', '%', 
		'\x2', '\x2', '\x16A', '\x16B', '\b', '\x19', '\x1', '\x2', '\x16B', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '&', '\x2', '\x2', 
		'\x16D', '\x16E', '\x5', '*', '\x16', '\x2', '\x16E', '\x16F', '\a', '\'', 
		'\x2', '\x2', '\x16F', '\x170', '\b', '\x19', '\x1', '\x2', '\x170', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '&', '\x2', '\x2', 
		'\x172', '\x173', '\x5', '*', '\x16', '\x2', '\x173', '\x174', '\a', '(', 
		'\x2', '\x2', '\x174', '\x175', '\b', '\x19', '\x1', '\x2', '\x175', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\a', ')', '\x2', '\x2', 
		'\x177', '\x178', '\x5', ',', '\x17', '\x2', '\x178', '\x179', '\a', '*', 
		'\x2', '\x2', '\x179', '\x17A', '\b', '\x19', '\x1', '\x2', '\x17A', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\a', '&', '\x2', '\x2', 
		'\x17C', '\x17D', '\x5', ',', '\x17', '\x2', '\x17D', '\x17E', '\a', '*', 
		'\x2', '\x2', '\x17E', '\x17F', '\b', '\x19', '\x1', '\x2', '\x17F', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\a', '&', '\x2', '\x2', 
		'\x181', '\x182', '\x5', ',', '\x17', '\x2', '\x182', '\x183', '\a', '(', 
		'\x2', '\x2', '\x183', '\x184', '\b', '\x19', '\x1', '\x2', '\x184', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x186', '\a', ')', '\x2', '\x2', 
		'\x186', '\x187', '\x5', ',', '\x17', '\x2', '\x187', '\x188', '\a', '(', 
		'\x2', '\x2', '\x188', '\x189', '\b', '\x19', '\x1', '\x2', '\x189', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\a', ')', '\x2', '\x2', 
		'\x18B', '\x18C', '\x5', '(', '\x15', '\x2', '\x18C', '\x18D', '\a', '*', 
		'\x2', '\x2', '\x18D', '\x18E', '\b', '\x19', '\x1', '\x2', '\x18E', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\a', '+', '\x2', '\x2', 
		'\x190', '\x191', '\x5', '.', '\x18', '\x2', '\x191', '\x192', '\a', ',', 
		'\x2', '\x2', '\x192', '\x193', '\b', '\x19', '\x1', '\x2', '\x193', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x195', '\a', '+', '\x2', '\x2', 
		'\x195', '\x196', '\x5', '*', '\x16', '\x2', '\x196', '\x197', '\a', ',', 
		'\x2', '\x2', '\x197', '\x198', '\b', '\x19', '\x1', '\x2', '\x198', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', '-', '\x2', '\x2', 
		'\x19A', '\x19B', '\x5', '*', '\x16', '\x2', '\x19B', '\x19C', '\a', '*', 
		'\x2', '\x2', '\x19C', '\x19D', '\b', '\x19', '\x1', '\x2', '\x19D', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', '\a', '.', '\x2', '\x2', 
		'\x19F', '\x1A0', '\x5', '*', '\x16', '\x2', '\x1A0', '\x1A1', '\a', '*', 
		'\x2', '\x2', '\x1A1', '\x1A2', '\b', '\x19', '\x1', '\x2', '\x1A2', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '/', '\x2', '\x2', 
		'\x1A4', '\x1A5', '\x5', '*', '\x16', '\x2', '\x1A5', '\x1A6', '\a', '*', 
		'\x2', '\x2', '\x1A6', '\x1A7', '\b', '\x19', '\x1', '\x2', '\x1A7', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '\x30', '\x2', '\x2', 
		'\x1A9', '\x1AA', '\x5', '*', '\x16', '\x2', '\x1AA', '\x1AB', '\a', '*', 
		'\x2', '\x2', '\x1AB', '\x1AC', '\b', '\x19', '\x1', '\x2', '\x1AC', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '\x31', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\x5', '*', '\x16', '\x2', '\x1AF', '\x1B0', '\a', '*', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\b', '\x19', '\x1', '\x2', '\x1B1', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B3', '\a', '\x32', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x5', '*', '\x16', '\x2', '\x1B4', '\x1B5', '\a', '*', 
		'\x2', '\x2', '\x1B5', '\x1B6', '\b', '\x19', '\x1', '\x2', '\x1B6', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\a', '\x33', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x5', '*', '\x16', '\x2', '\x1B9', '\x1BA', '\a', '*', 
		'\x2', '\x2', '\x1BA', '\x1BB', '\b', '\x19', '\x1', '\x2', '\x1BB', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BD', '\a', '\x34', '\x2', '\x2', 
		'\x1BD', '\x1BE', '\x5', '*', '\x16', '\x2', '\x1BE', '\x1BF', '\a', '*', 
		'\x2', '\x2', '\x1BF', '\x1C0', '\b', '\x19', '\x1', '\x2', '\x1C0', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\a', '\x35', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\x5', '*', '\x16', '\x2', '\x1C3', '\x1C4', '\a', '*', 
		'\x2', '\x2', '\x1C4', '\x1C5', '\b', '\x19', '\x1', '\x2', '\x1C5', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\a', '\x36', '\x2', '\x2', 
		'\x1C7', '\x1C8', '\x5', '*', '\x16', '\x2', '\x1C8', '\x1C9', '\a', '*', 
		'\x2', '\x2', '\x1C9', '\x1CA', '\b', '\x19', '\x1', '\x2', '\x1CA', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '\x37', '\x2', '\x2', 
		'\x1CC', '\x1CD', '\x5', '*', '\x16', '\x2', '\x1CD', '\x1CE', '\a', '*', 
		'\x2', '\x2', '\x1CE', '\x1CF', '\b', '\x19', '\x1', '\x2', '\x1CF', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\a', '\x38', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\x5', '*', '\x16', '\x2', '\x1D2', '\x1D3', '\a', '*', 
		'\x2', '\x2', '\x1D3', '\x1D4', '\b', '\x19', '\x1', '\x2', '\x1D4', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x39', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\x5', '*', '\x16', '\x2', '\x1D7', '\x1D8', '\a', '*', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\b', '\x19', '\x1', '\x2', '\x1D9', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\a', ':', '\x2', '\x2', 
		'\x1DB', '\x1DC', '\x5', '*', '\x16', '\x2', '\x1DC', '\x1DD', '\a', '*', 
		'\x2', '\x2', '\x1DD', '\x1DE', '\b', '\x19', '\x1', '\x2', '\x1DE', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1E0', '\a', ';', '\x2', '\x2', 
		'\x1E0', '\x1E1', '\x5', '*', '\x16', '\x2', '\x1E1', '\x1E2', '\a', '*', 
		'\x2', '\x2', '\x1E2', '\x1E3', '\b', '\x19', '\x1', '\x2', '\x1E3', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E5', '\a', '<', '\x2', '\x2', 
		'\x1E5', '\x1E6', '\x5', '*', '\x16', '\x2', '\x1E6', '\x1E7', '\a', '*', 
		'\x2', '\x2', '\x1E7', '\x1E8', '\b', '\x19', '\x1', '\x2', '\x1E8', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', '=', '\x2', '\x2', 
		'\x1EA', '\x1EB', '\x5', '*', '\x16', '\x2', '\x1EB', '\x1EC', '\a', '*', 
		'\x2', '\x2', '\x1EC', '\x1ED', '\b', '\x19', '\x1', '\x2', '\x1ED', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '>', '\x2', '\x2', 
		'\x1EF', '\x1F0', '\x5', '*', '\x16', '\x2', '\x1F0', '\x1F1', '\a', '*', 
		'\x2', '\x2', '\x1F1', '\x1F2', '\b', '\x19', '\x1', '\x2', '\x1F2', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '?', '\x2', '\x2', 
		'\x1F4', '\x1F5', '\x5', '*', '\x16', '\x2', '\x1F5', '\x1F6', '\a', '*', 
		'\x2', '\x2', '\x1F6', '\x1F7', '\b', '\x19', '\x1', '\x2', '\x1F7', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F9', '\a', '@', '\x2', '\x2', 
		'\x1F9', '\x1FA', '\x5', '*', '\x16', '\x2', '\x1FA', '\x1FB', '\a', '*', 
		'\x2', '\x2', '\x1FB', '\x1FC', '\b', '\x19', '\x1', '\x2', '\x1FC', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', '\x41', '\x2', '\x2', 
		'\x1FE', '\x1FF', '\x5', '*', '\x16', '\x2', '\x1FF', '\x200', '\a', '*', 
		'\x2', '\x2', '\x200', '\x201', '\b', '\x19', '\x1', '\x2', '\x201', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\a', '\x42', '\x2', '\x2', 
		'\x203', '\x204', '\x5', '*', '\x16', '\x2', '\x204', '\x205', '\a', '*', 
		'\x2', '\x2', '\x205', '\x206', '\b', '\x19', '\x1', '\x2', '\x206', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x208', '\a', '\x43', '\x2', '\x2', 
		'\x208', '\x209', '\x5', '*', '\x16', '\x2', '\x209', '\x20A', '\a', '*', 
		'\x2', '\x2', '\x20A', '\x20B', '\b', '\x19', '\x1', '\x2', '\x20B', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '\x44', '\x2', '\x2', 
		'\x20D', '\x20E', '\x5', '*', '\x16', '\x2', '\x20E', '\x20F', '\a', '*', 
		'\x2', '\x2', '\x20F', '\x210', '\b', '\x19', '\x1', '\x2', '\x210', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x211', '\x212', '\a', '\x45', '\x2', '\x2', 
		'\x212', '\x213', '\x5', '*', '\x16', '\x2', '\x213', '\x214', '\a', '*', 
		'\x2', '\x2', '\x214', '\x215', '\b', '\x19', '\x1', '\x2', '\x215', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\a', '\x46', '\x2', '\x2', 
		'\x217', '\x218', '\x5', '*', '\x16', '\x2', '\x218', '\x219', '\a', '*', 
		'\x2', '\x2', '\x219', '\x21A', '\b', '\x19', '\x1', '\x2', '\x21A', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', 'G', '\x2', '\x2', 
		'\x21C', '\x21D', '\x5', '*', '\x16', '\x2', '\x21D', '\x21E', '\a', '*', 
		'\x2', '\x2', '\x21E', '\x21F', '\b', '\x19', '\x1', '\x2', '\x21F', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x220', '\x221', '\a', 'H', '\x2', '\x2', 
		'\x221', '\x222', '\x5', '*', '\x16', '\x2', '\x222', '\x223', '\a', '*', 
		'\x2', '\x2', '\x223', '\x224', '\b', '\x19', '\x1', '\x2', '\x224', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\a', 'I', '\x2', '\x2', 
		'\x226', '\x227', '\x5', '*', '\x16', '\x2', '\x227', '\x228', '\a', '*', 
		'\x2', '\x2', '\x228', '\x229', '\b', '\x19', '\x1', '\x2', '\x229', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', '\a', 'J', '\x2', '\x2', 
		'\x22B', '\x22C', '\x5', '*', '\x16', '\x2', '\x22C', '\x22D', '\a', '*', 
		'\x2', '\x2', '\x22D', '\x22E', '\b', '\x19', '\x1', '\x2', '\x22E', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', 'K', '\x2', '\x2', 
		'\x230', '\x231', '\x5', '*', '\x16', '\x2', '\x231', '\x232', '\a', '*', 
		'\x2', '\x2', '\x232', '\x233', '\b', '\x19', '\x1', '\x2', '\x233', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', 'L', '\x2', '\x2', 
		'\x235', '\x236', '\x5', '*', '\x16', '\x2', '\x236', '\x237', '\a', '*', 
		'\x2', '\x2', '\x237', '\x238', '\b', '\x19', '\x1', '\x2', '\x238', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\a', 'M', '\x2', '\x2', 
		'\x23A', '\x23B', '\x5', '*', '\x16', '\x2', '\x23B', '\x23C', '\a', '*', 
		'\x2', '\x2', '\x23C', '\x23D', '\b', '\x19', '\x1', '\x2', '\x23D', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\a', 'N', '\x2', '\x2', 
		'\x23F', '\x240', '\x5', '*', '\x16', '\x2', '\x240', '\x241', '\a', '*', 
		'\x2', '\x2', '\x241', '\x242', '\b', '\x19', '\x1', '\x2', '\x242', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\a', 'O', '\x2', '\x2', 
		'\x244', '\x245', '\x5', '*', '\x16', '\x2', '\x245', '\x246', '\a', '*', 
		'\x2', '\x2', '\x246', '\x247', '\b', '\x19', '\x1', '\x2', '\x247', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', 'P', '\x2', '\x2', 
		'\x249', '\x24A', '\x5', '*', '\x16', '\x2', '\x24A', '\x24B', '\a', '*', 
		'\x2', '\x2', '\x24B', '\x24C', '\b', '\x19', '\x1', '\x2', '\x24C', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\a', 'Q', '\x2', '\x2', 
		'\x24E', '\x24F', '\x5', '*', '\x16', '\x2', '\x24F', '\x250', '\a', '*', 
		'\x2', '\x2', '\x250', '\x251', '\b', '\x19', '\x1', '\x2', '\x251', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x252', '\x253', '\a', 'R', '\x2', '\x2', 
		'\x253', '\x254', '\x5', '*', '\x16', '\x2', '\x254', '\x255', '\a', '*', 
		'\x2', '\x2', '\x255', '\x256', '\b', '\x19', '\x1', '\x2', '\x256', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\a', 'S', '\x2', '\x2', 
		'\x258', '\x259', '\x5', '*', '\x16', '\x2', '\x259', '\x25A', '\a', '*', 
		'\x2', '\x2', '\x25A', '\x25B', '\b', '\x19', '\x1', '\x2', '\x25B', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\a', 'T', '\x2', '\x2', 
		'\x25D', '\x25E', '\x5', '*', '\x16', '\x2', '\x25E', '\x25F', '\a', '*', 
		'\x2', '\x2', '\x25F', '\x260', '\b', '\x19', '\x1', '\x2', '\x260', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\a', 'U', '\x2', '\x2', 
		'\x262', '\x263', '\x5', '*', '\x16', '\x2', '\x263', '\x264', '\a', '*', 
		'\x2', '\x2', '\x264', '\x265', '\b', '\x19', '\x1', '\x2', '\x265', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\a', 'V', '\x2', '\x2', 
		'\x267', '\x268', '\x5', '*', '\x16', '\x2', '\x268', '\x269', '\a', '*', 
		'\x2', '\x2', '\x269', '\x26A', '\b', '\x19', '\x1', '\x2', '\x26A', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\a', 'W', '\x2', '\x2', 
		'\x26C', '\x26D', '\x5', '*', '\x16', '\x2', '\x26D', '\x26E', '\a', '*', 
		'\x2', '\x2', '\x26E', '\x26F', '\b', '\x19', '\x1', '\x2', '\x26F', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\a', 'X', '\x2', '\x2', 
		'\x271', '\x272', '\x5', '*', '\x16', '\x2', '\x272', '\x273', '\a', '*', 
		'\x2', '\x2', '\x273', '\x274', '\b', '\x19', '\x1', '\x2', '\x274', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\a', 'Y', '\x2', '\x2', 
		'\x276', '\x277', '\x5', '*', '\x16', '\x2', '\x277', '\x278', '\a', '*', 
		'\x2', '\x2', '\x278', '\x279', '\b', '\x19', '\x1', '\x2', '\x279', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\a', 'Z', '\x2', '\x2', 
		'\x27B', '\x27C', '\x5', '*', '\x16', '\x2', '\x27C', '\x27D', '\a', '*', 
		'\x2', '\x2', '\x27D', '\x27E', '\b', '\x19', '\x1', '\x2', '\x27E', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', '\a', '[', '\x2', '\x2', 
		'\x280', '\x281', '\x5', '*', '\x16', '\x2', '\x281', '\x282', '\a', '*', 
		'\x2', '\x2', '\x282', '\x283', '\b', '\x19', '\x1', '\x2', '\x283', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x284', '\x285', '\a', '\\', '\x2', '\x2', 
		'\x285', '\x286', '\x5', '*', '\x16', '\x2', '\x286', '\x287', '\a', '*', 
		'\x2', '\x2', '\x287', '\x288', '\b', '\x19', '\x1', '\x2', '\x288', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\a', ']', '\x2', '\x2', 
		'\x28A', '\x28B', '\x5', '*', '\x16', '\x2', '\x28B', '\x28C', '\a', '*', 
		'\x2', '\x2', '\x28C', '\x28D', '\b', '\x19', '\x1', '\x2', '\x28D', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', '\a', '^', '\x2', '\x2', 
		'\x28F', '\x290', '\x5', '*', '\x16', '\x2', '\x290', '\x291', '\a', '*', 
		'\x2', '\x2', '\x291', '\x292', '\b', '\x19', '\x1', '\x2', '\x292', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\a', '_', '\x2', '\x2', 
		'\x294', '\x295', '\x5', '*', '\x16', '\x2', '\x295', '\x296', '\a', '*', 
		'\x2', '\x2', '\x296', '\x297', '\b', '\x19', '\x1', '\x2', '\x297', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x298', '\x299', '\a', '`', '\x2', '\x2', 
		'\x299', '\x29A', '\x5', '*', '\x16', '\x2', '\x29A', '\x29B', '\a', '*', 
		'\x2', '\x2', '\x29B', '\x29C', '\b', '\x19', '\x1', '\x2', '\x29C', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29E', '\a', '\x61', '\x2', '\x2', 
		'\x29E', '\x29F', '\x5', '*', '\x16', '\x2', '\x29F', '\x2A0', '\a', '*', 
		'\x2', '\x2', '\x2A0', '\x2A1', '\b', '\x19', '\x1', '\x2', '\x2A1', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A3', '\a', '\x62', '\x2', '\x2', 
		'\x2A3', '\x2A4', '\x5', '*', '\x16', '\x2', '\x2A4', '\x2A5', '\a', '*', 
		'\x2', '\x2', '\x2A5', '\x2A6', '\b', '\x19', '\x1', '\x2', '\x2A6', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A8', '\a', '\x63', '\x2', '\x2', 
		'\x2A8', '\x2A9', '\x5', '*', '\x16', '\x2', '\x2A9', '\x2AA', '\a', '*', 
		'\x2', '\x2', '\x2AA', '\x2AB', '\b', '\x19', '\x1', '\x2', '\x2AB', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', '\x64', '\x2', '\x2', 
		'\x2AD', '\x2AE', '\x5', '*', '\x16', '\x2', '\x2AE', '\x2AF', '\a', '*', 
		'\x2', '\x2', '\x2AF', '\x2B0', '\b', '\x19', '\x1', '\x2', '\x2B0', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\a', '\x65', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\x5', '*', '\x16', '\x2', '\x2B3', '\x2B4', '\a', '*', 
		'\x2', '\x2', '\x2B4', '\x2B5', '\b', '\x19', '\x1', '\x2', '\x2B5', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\a', '\x66', '\x2', '\x2', 
		'\x2B7', '\x2B8', '\x5', '*', '\x16', '\x2', '\x2B8', '\x2B9', '\a', '*', 
		'\x2', '\x2', '\x2B9', '\x2BA', '\b', '\x19', '\x1', '\x2', '\x2BA', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\a', 'g', '\x2', '\x2', 
		'\x2BC', '\x2BD', '\x5', '*', '\x16', '\x2', '\x2BD', '\x2BE', '\a', '*', 
		'\x2', '\x2', '\x2BE', '\x2BF', '\b', '\x19', '\x1', '\x2', '\x2BF', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', '\a', 'h', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\x5', '*', '\x16', '\x2', '\x2C2', '\x2C3', '\a', '*', 
		'\x2', '\x2', '\x2C3', '\x2C4', '\b', '\x19', '\x1', '\x2', '\x2C4', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C6', '\a', 'i', '\x2', '\x2', 
		'\x2C6', '\x2C7', '\x5', '*', '\x16', '\x2', '\x2C7', '\x2C8', '\a', '*', 
		'\x2', '\x2', '\x2C8', '\x2C9', '\b', '\x19', '\x1', '\x2', '\x2C9', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', '\a', 'j', '\x2', '\x2', 
		'\x2CB', '\x2CC', '\x5', '*', '\x16', '\x2', '\x2CC', '\x2CD', '\a', '*', 
		'\x2', '\x2', '\x2CD', '\x2CE', '\b', '\x19', '\x1', '\x2', '\x2CE', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', '\a', 'k', '\x2', '\x2', 
		'\x2D0', '\x2D1', '\x5', '*', '\x16', '\x2', '\x2D1', '\x2D2', '\a', '*', 
		'\x2', '\x2', '\x2D2', '\x2D3', '\b', '\x19', '\x1', '\x2', '\x2D3', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\a', 'l', '\x2', '\x2', 
		'\x2D5', '\x2D6', '\x5', '*', '\x16', '\x2', '\x2D6', '\x2D7', '\a', '*', 
		'\x2', '\x2', '\x2D7', '\x2D8', '\b', '\x19', '\x1', '\x2', '\x2D8', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2D9', '\x2DA', '\a', 'm', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\x5', '*', '\x16', '\x2', '\x2DB', '\x2DC', '\a', '*', 
		'\x2', '\x2', '\x2DC', '\x2DD', '\b', '\x19', '\x1', '\x2', '\x2DD', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', '\a', 'n', '\x2', '\x2', 
		'\x2DF', '\x2E0', '\x5', '*', '\x16', '\x2', '\x2E0', '\x2E1', '\a', '*', 
		'\x2', '\x2', '\x2E1', '\x2E2', '\b', '\x19', '\x1', '\x2', '\x2E2', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\a', 'o', '\x2', '\x2', 
		'\x2E4', '\x2E5', '\x5', '*', '\x16', '\x2', '\x2E5', '\x2E6', '\a', '*', 
		'\x2', '\x2', '\x2E6', '\x2E7', '\b', '\x19', '\x1', '\x2', '\x2E7', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2E9', '\a', 'p', '\x2', '\x2', 
		'\x2E9', '\x2EA', '\x5', '*', '\x16', '\x2', '\x2EA', '\x2EB', '\a', '*', 
		'\x2', '\x2', '\x2EB', '\x2EC', '\b', '\x19', '\x1', '\x2', '\x2EC', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\a', 'q', '\x2', '\x2', 
		'\x2EE', '\x2EF', '\x5', '*', '\x16', '\x2', '\x2EF', '\x2F0', '\a', '*', 
		'\x2', '\x2', '\x2F0', '\x2F1', '\b', '\x19', '\x1', '\x2', '\x2F1', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\a', 'r', '\x2', '\x2', 
		'\x2F3', '\x2F4', '\x5', '*', '\x16', '\x2', '\x2F4', '\x2F5', '\a', '*', 
		'\x2', '\x2', '\x2F5', '\x2F6', '\b', '\x19', '\x1', '\x2', '\x2F6', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F8', '\a', 's', '\x2', '\x2', 
		'\x2F8', '\x2F9', '\x5', '*', '\x16', '\x2', '\x2F9', '\x2FA', '\a', '*', 
		'\x2', '\x2', '\x2FA', '\x2FB', '\b', '\x19', '\x1', '\x2', '\x2FB', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\a', 't', '\x2', '\x2', 
		'\x2FD', '\x2FE', '\x5', '*', '\x16', '\x2', '\x2FE', '\x2FF', '\a', '*', 
		'\x2', '\x2', '\x2FF', '\x300', '\b', '\x19', '\x1', '\x2', '\x300', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\a', 'u', '\x2', '\x2', 
		'\x302', '\x303', '\x5', '*', '\x16', '\x2', '\x303', '\x304', '\a', '*', 
		'\x2', '\x2', '\x304', '\x305', '\b', '\x19', '\x1', '\x2', '\x305', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x306', '\x307', '\a', 'v', '\x2', '\x2', 
		'\x307', '\x308', '\x5', '*', '\x16', '\x2', '\x308', '\x309', '\a', '*', 
		'\x2', '\x2', '\x309', '\x30A', '\b', '\x19', '\x1', '\x2', '\x30A', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x30C', '\a', 'w', '\x2', '\x2', 
		'\x30C', '\x30D', '\x5', '*', '\x16', '\x2', '\x30D', '\x30E', '\a', '*', 
		'\x2', '\x2', '\x30E', '\x30F', '\b', '\x19', '\x1', '\x2', '\x30F', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\a', 'x', '\x2', '\x2', 
		'\x311', '\x312', '\x5', '*', '\x16', '\x2', '\x312', '\x313', '\a', '*', 
		'\x2', '\x2', '\x313', '\x314', '\b', '\x19', '\x1', '\x2', '\x314', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\a', 'y', '\x2', '\x2', 
		'\x316', '\x317', '\x5', '*', '\x16', '\x2', '\x317', '\x318', '\a', '*', 
		'\x2', '\x2', '\x318', '\x319', '\b', '\x19', '\x1', '\x2', '\x319', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\a', 'z', '\x2', '\x2', 
		'\x31B', '\x31C', '\x5', '*', '\x16', '\x2', '\x31C', '\x31D', '\a', '*', 
		'\x2', '\x2', '\x31D', '\x31E', '\b', '\x19', '\x1', '\x2', '\x31E', '\x320', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x15F', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x167', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x176', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x194', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1A3', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1CB', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1E4', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x202', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x207', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x216', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x220', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x22A', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x23E', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x243', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x248', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x24D', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x252', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x257', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x25C', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x266', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x26B', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x270', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x27A', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x284', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x298', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x29D', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x2C5', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2CA', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2D4', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x2D9', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2F2', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x301', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x306', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x30B', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x310', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x31A', '\x3', '\x2', '\x2', 
		'\x2', '\x320', '\x31', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', 
		'\x5', '(', '\x15', '\x2', '\x322', '\x323', '\a', '\x2', '\x2', '\x3', 
		'\x323', '\x324', '\b', '\x1A', '\x1', '\x2', '\x324', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '%', ';', '\x43', 'K', 'M', 'T', '^', 'h', 'm', 'y', 
		'{', '\x88', '\x8A', '\x97', '\x99', '\xA6', '\xA8', '\xB5', '\xB7', '\xC2', 
		'\xDB', '\xDD', '\xE6', '\xED', '\xFA', '\x106', '\x108', '\x113', '\x120', 
		'\x122', '\x12F', '\x131', '\x13C', '\x14A', '\x14D', '\x31F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AngouriMath.Core.Antlr
