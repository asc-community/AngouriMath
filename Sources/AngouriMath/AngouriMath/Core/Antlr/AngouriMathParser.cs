//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./AngouriMath.g by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AngouriMath.Core.Antlr {

    using System.Linq;
    using AngouriMath;
    using static AngouriMath.Core.Exceptions.FunctionArgumentCountException;
    using static AngouriMath.Entity.Number;
    using AngouriMath.Core.Exceptions;
    using static AngouriMath.Entity.Set;
    using static AngouriMath.Entity;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
internal partial class AngouriMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, T__90=91, T__91=92, T__92=93, T__93=94, 
		T__94=95, T__95=96, T__96=97, T__97=98, T__98=99, T__99=100, T__100=101, 
		T__101=102, T__102=103, T__103=104, T__104=105, T__105=106, T__106=107, 
		T__107=108, T__108=109, T__109=110, T__110=111, T__111=112, T__112=113, 
		T__113=114, T__114=115, T__115=116, T__116=117, T__117=118, T__118=119, 
		T__119=120, NEWLINE=121, NUMBER=122, SPECIALSET=123, BOOLEAN=124, VARIABLE=125, 
		COMMENT=126, WS=127;
	public const int
		RULE_factorial_expression = 0, RULE_power_list = 1, RULE_power_expression = 2, 
		RULE_unary_expression = 3, RULE_mult_expression = 4, RULE_sum_expression = 5, 
		RULE_set_operator_intersection = 6, RULE_set_operator_union = 7, RULE_set_operator_setsubtraction = 8, 
		RULE_in_operator = 9, RULE_inequality_expression = 10, RULE_terms_list = 11, 
		RULE_equality_expression = 12, RULE_negate_expression = 13, RULE_and_expression = 14, 
		RULE_xor_expression = 15, RULE_or_expression = 16, RULE_implies_expression = 17, 
		RULE_provided_expression = 18, RULE_expression = 19, RULE_function_arguments = 20, 
		RULE_interval_arguments = 21, RULE_cset_arguments = 22, RULE_atom = 23, 
		RULE_statement = 24;
	public static readonly string[] ruleNames = {
		"factorial_expression", "power_list", "power_expression", "unary_expression", 
		"mult_expression", "sum_expression", "set_operator_intersection", "set_operator_union", 
		"set_operator_setsubtraction", "in_operator", "inequality_expression", 
		"terms_list", "equality_expression", "negate_expression", "and_expression", 
		"xor_expression", "or_expression", "implies_expression", "provided_expression", 
		"expression", "function_arguments", "interval_arguments", "cset_arguments", 
		"atom", "statement"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'^'", "'-'", "'+'", "'*'", "'/'", "'intersect'", "'/\\'", 
		"'unite'", "'\\/'", "'setsubtract'", "'\\'", "'in'", "'>='", "'<='", "'>'", 
		"'<'", "'equalizes'", "'='", "'not'", "'and'", "'&'", "'xor'", "'or'", 
		"'|'", "'implies'", "'->'", "'provided'", "','", "';'", "':'", "'+oo'", 
		"'-oo'", "'(|'", "'|)'", "'['", "']T'", "']'", "'('", "')'", "'{'", "'}'", 
		"'log('", "'sqrt('", "'cbrt('", "'sqr('", "'ln('", "'sin('", "'cos('", 
		"'tan('", "'cotan('", "'cot('", "'sec('", "'cosec('", "'csc('", "'arcsin('", 
		"'arccos('", "'arctan('", "'arccotan('", "'arcsec('", "'arccosec('", "'arccsc('", 
		"'acsc('", "'asin('", "'acos('", "'atan('", "'acotan('", "'asec('", "'acosec('", 
		"'acot('", "'arccot('", "'sinh('", "'sh('", "'cosh('", "'ch('", "'tanh('", 
		"'th('", "'cotanh('", "'coth('", "'cth('", "'sech('", "'sch('", "'cosech('", 
		"'csch('", "'asinh('", "'arsinh('", "'arsh('", "'acosh('", "'arcosh('", 
		"'arch('", "'atanh('", "'artanh('", "'arth('", "'acoth('", "'arcoth('", 
		"'acotanh('", "'arcotanh('", "'arcth('", "'asech('", "'arsech('", "'arsch('", 
		"'acosech('", "'arcosech('", "'arcsch('", "'acsch('", "'gamma('", "'derivative('", 
		"'integral('", "'limit('", "'limitleft('", "'limitright('", "'signum('", 
		"'sgn('", "'sign('", "'abs('", "'phi('", "'domain('", "'piecewise('", 
		"'apply('", "'lambda('"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "NEWLINE", "NUMBER", "SPECIALSET", "BOOLEAN", "VARIABLE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "AngouriMath.g"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static AngouriMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


	    // Nullable reference type analysis is disabled by default for generated code without '#nullable enable'
	    public Entity Result = null;
	    
	    public void Parse() { this.statement(); }

		public AngouriMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public AngouriMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	internal partial class Factorial_expressionContext : ParserRuleContext {
		public Entity value;
		public AtomContext p;
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Factorial_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factorial_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFactorial_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFactorial_expression(this);
		}
	}

	[RuleVersion(0)]
	public Factorial_expressionContext factorial_expression() {
		Factorial_expressionContext _localctx = new Factorial_expressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_factorial_expression);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				_localctx.p = atom();
				State = 51;
				Match(T__0);
				 _localctx.value =  MathS.Factorial(_localctx.p.value); 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54;
				_localctx.p = atom();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_listContext : ParserRuleContext {
		public List<Entity> value;
		public Factorial_expressionContext _factorial_expression;
		public Unary_expressionContext _unary_expression;
		[System.Diagnostics.DebuggerNonUserCode] public Factorial_expressionContext[] factorial_expression() {
			return GetRuleContexts<Factorial_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Factorial_expressionContext factorial_expression(int i) {
			return GetRuleContext<Factorial_expressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Power_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_list(this);
		}
	}

	[RuleVersion(0)]
	public Power_listContext power_list() {
		Power_listContext _localctx = new Power_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_power_list);
		 _localctx.value =  new(); 
		try {
			int _alt;
			State = 75;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 59;
						Match(T__1);
						State = 60;
						_localctx._factorial_expression = factorial_expression();
						 _localctx.value.Add(_localctx._factorial_expression.value); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 65;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 71;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 67;
						Match(T__1);
						State = 68;
						_localctx._unary_expression = unary_expression();
						 _localctx.value.Add(_localctx._unary_expression.value); 
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 73;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Power_expressionContext : ParserRuleContext {
		public Entity value;
		public Factorial_expressionContext _factorial_expression;
		public Power_listContext _power_list;
		[System.Diagnostics.DebuggerNonUserCode] public Factorial_expressionContext factorial_expression() {
			return GetRuleContext<Factorial_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Power_listContext power_list() {
			return GetRuleContext<Power_listContext>(0);
		}
		public Power_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_power_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterPower_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitPower_expression(this);
		}
	}

	[RuleVersion(0)]
	public Power_expressionContext power_expression() {
		Power_expressionContext _localctx = new Power_expressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_power_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			_localctx._factorial_expression = factorial_expression();
			 _localctx.value =  _localctx._factorial_expression.value; 
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 79;
				_localctx._power_list = power_list();

				            _localctx.value =  _localctx._power_list.value
				                        .Prepend(_localctx._factorial_expression.value)
				                        .Reverse()
				                        .Aggregate((exp, @base) => @base.Pow(exp));
				        
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Unary_expressionContext : ParserRuleContext {
		public Entity value;
		public Power_expressionContext p;
		public Unary_expressionContext u;
		[System.Diagnostics.DebuggerNonUserCode] public Power_expressionContext power_expression() {
			return GetRuleContext<Power_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_unary_expression);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 84;
					Match(T__2);
					State = 85;
					_localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value is Number num ? -num : -_localctx.p.value; 
					}
					break;
				case T__3:
					{
					State = 88;
					Match(T__3);
					State = 89;
					_localctx.p = power_expression();
					 _localctx.value =  _localctx.p.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 102;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__2:
					{
					State = 94;
					Match(T__2);
					State = 95;
					_localctx.u = unary_expression();
					 _localctx.value =  -_localctx.u.value; 
					}
					break;
				case T__3:
					{
					State = 98;
					Match(T__3);
					State = 99;
					_localctx.u = unary_expression();
					 _localctx.value =  _localctx.u.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				_localctx.p = power_expression();
				 _localctx.value =  _localctx.p.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Mult_expressionContext : ParserRuleContext {
		public Entity value;
		public Unary_expressionContext u1;
		public Unary_expressionContext u2;
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public Mult_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterMult_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitMult_expression(this);
		}
	}

	[RuleVersion(0)]
	public Mult_expressionContext mult_expression() {
		Mult_expressionContext _localctx = new Mult_expressionContext(Context, State);
		EnterRule(_localctx, 8, RULE_mult_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_localctx.u1 = unary_expression();
			 _localctx.value =  _localctx.u1.value; 
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==T__5) {
				{
				State = 119;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 111;
					Match(T__4);
					State = 112;
					_localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value * _localctx.u2.value; 
					}
					break;
				case T__5:
					{
					State = 115;
					Match(T__5);
					State = 116;
					_localctx.u2 = unary_expression();
					 _localctx.value =  _localctx.value / _localctx.u2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Sum_expressionContext : ParserRuleContext {
		public Entity value;
		public Mult_expressionContext m1;
		public Mult_expressionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public Mult_expressionContext[] mult_expression() {
			return GetRuleContexts<Mult_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mult_expressionContext mult_expression(int i) {
			return GetRuleContext<Mult_expressionContext>(i);
		}
		public Sum_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSum_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSum_expression(this);
		}
	}

	[RuleVersion(0)]
	public Sum_expressionContext sum_expression() {
		Sum_expressionContext _localctx = new Sum_expressionContext(Context, State);
		EnterRule(_localctx, 10, RULE_sum_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			_localctx.m1 = mult_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2 || _la==T__3) {
				{
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__3:
					{
					State = 126;
					Match(T__3);
					State = 127;
					_localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value + _localctx.m2.value; 
					}
					break;
				case T__2:
					{
					State = 130;
					Match(T__2);
					State = 131;
					_localctx.m2 = mult_expression();
					 _localctx.value =  _localctx.value - _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_intersectionContext : ParserRuleContext {
		public Entity value;
		public Sum_expressionContext left;
		public Sum_expressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Sum_expressionContext[] sum_expression() {
			return GetRuleContexts<Sum_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sum_expressionContext sum_expression(int i) {
			return GetRuleContext<Sum_expressionContext>(i);
		}
		public Set_operator_intersectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_intersection; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_intersection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_intersection(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_intersectionContext set_operator_intersection() {
		Set_operator_intersectionContext _localctx = new Set_operator_intersectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_set_operator_intersection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_localctx.left = sum_expression();
			 _localctx.value =  _localctx.left.value; 
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6 || _la==T__7) {
				{
				State = 149;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__6:
					{
					State = 141;
					Match(T__6);
					State = 142;
					_localctx.right = sum_expression();
					 _localctx.value =  _localctx.value.Intersect(_localctx.right.value); 
					}
					break;
				case T__7:
					{
					State = 145;
					Match(T__7);
					State = 146;
					_localctx.right = sum_expression();
					 _localctx.value =  _localctx.value.Intersect(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_unionContext : ParserRuleContext {
		public Entity value;
		public Set_operator_intersectionContext left;
		public Set_operator_intersectionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_intersectionContext[] set_operator_intersection() {
			return GetRuleContexts<Set_operator_intersectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_intersectionContext set_operator_intersection(int i) {
			return GetRuleContext<Set_operator_intersectionContext>(i);
		}
		public Set_operator_unionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_union; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_union(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_union(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_unionContext set_operator_union() {
		Set_operator_unionContext _localctx = new Set_operator_unionContext(Context, State);
		EnterRule(_localctx, 14, RULE_set_operator_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.left = set_operator_intersection();
			 _localctx.value =  _localctx.left.value; 
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8 || _la==T__9) {
				{
				State = 164;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__8:
					{
					State = 156;
					Match(T__8);
					State = 157;
					_localctx.right = set_operator_intersection();
					 _localctx.value =  _localctx.value.Unite(_localctx.right.value); 
					}
					break;
				case T__9:
					{
					State = 160;
					Match(T__9);
					State = 161;
					_localctx.right = set_operator_intersection();
					 _localctx.value =  _localctx.value.Unite(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Set_operator_setsubtractionContext : ParserRuleContext {
		public Entity value;
		public Set_operator_unionContext left;
		public Set_operator_unionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_unionContext[] set_operator_union() {
			return GetRuleContexts<Set_operator_unionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_unionContext set_operator_union(int i) {
			return GetRuleContext<Set_operator_unionContext>(i);
		}
		public Set_operator_setsubtractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_operator_setsubtraction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterSet_operator_setsubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitSet_operator_setsubtraction(this);
		}
	}

	[RuleVersion(0)]
	public Set_operator_setsubtractionContext set_operator_setsubtraction() {
		Set_operator_setsubtractionContext _localctx = new Set_operator_setsubtractionContext(Context, State);
		EnterRule(_localctx, 16, RULE_set_operator_setsubtraction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			_localctx.left = set_operator_union();
			 _localctx.value =  _localctx.left.value; 
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__10 || _la==T__11) {
				{
				State = 179;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__10:
					{
					State = 171;
					Match(T__10);
					State = 172;
					_localctx.right = set_operator_union();
					 _localctx.value =  _localctx.value.SetSubtract(_localctx.right.value); 
					}
					break;
				case T__11:
					{
					State = 175;
					Match(T__11);
					State = 176;
					_localctx.right = set_operator_union();
					 _localctx.value =  _localctx.value.SetSubtract(_localctx.right.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class In_operatorContext : ParserRuleContext {
		public Entity value;
		public Set_operator_setsubtractionContext m1;
		public Set_operator_setsubtractionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_setsubtractionContext[] set_operator_setsubtraction() {
			return GetRuleContexts<Set_operator_setsubtractionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_operator_setsubtractionContext set_operator_setsubtraction(int i) {
			return GetRuleContext<Set_operator_setsubtractionContext>(i);
		}
		public In_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterIn_operator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitIn_operator(this);
		}
	}

	[RuleVersion(0)]
	public In_operatorContext in_operator() {
		In_operatorContext _localctx = new In_operatorContext(Context, State);
		EnterRule(_localctx, 18, RULE_in_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184;
			_localctx.m1 = set_operator_setsubtraction();
			 _localctx.value =  _localctx.m1.value; 
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 186;
				Match(T__12);
				State = 187;
				_localctx.m2 = set_operator_setsubtraction();
				 _localctx.value =  _localctx.value.In(_localctx.m2.value); 
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Inequality_expressionContext : ParserRuleContext {
		public Entity value;
		public In_operatorContext m1;
		public In_operatorContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public In_operatorContext[] in_operator() {
			return GetRuleContexts<In_operatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public In_operatorContext in_operator(int i) {
			return GetRuleContext<In_operatorContext>(i);
		}
		public Inequality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inequality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInequality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInequality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Inequality_expressionContext inequality_expression() {
		Inequality_expressionContext _localctx = new Inequality_expressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_inequality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_localctx.m1 = in_operator();
			 _localctx.value =  _localctx.m1.value; 
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 507904L) != 0)) {
				{
				State = 217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
					{
					State = 197;
					Match(T__13);
					State = 198;
					_localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value >= _localctx.m2.value; 
					}
					break;
				case T__14:
					{
					State = 201;
					Match(T__14);
					State = 202;
					_localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value <= _localctx.m2.value; 
					}
					break;
				case T__15:
					{
					State = 205;
					Match(T__15);
					State = 206;
					_localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value > _localctx.m2.value; 
					}
					break;
				case T__16:
					{
					State = 209;
					Match(T__16);
					State = 210;
					_localctx.m2 = in_operator();
					 _localctx.value =  _localctx.value < _localctx.m2.value; 
					}
					break;
				case T__17:
					{
					State = 213;
					Match(T__17);
					State = 214;
					_localctx.m2 = in_operator();
					 _localctx.value =  MathS.Equality(_localctx.value, _localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Terms_listContext : ParserRuleContext {
		public List<Entity> terms;
		public Inequality_expressionContext term;
		[System.Diagnostics.DebuggerNonUserCode] public Inequality_expressionContext[] inequality_expression() {
			return GetRuleContexts<Inequality_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Inequality_expressionContext inequality_expression(int i) {
			return GetRuleContext<Inequality_expressionContext>(i);
		}
		public Terms_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terms_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterTerms_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitTerms_list(this);
		}
	}

	[RuleVersion(0)]
	public Terms_listContext terms_list() {
		Terms_listContext _localctx = new Terms_listContext(Context, State);
		EnterRule(_localctx, 22, RULE_terms_list);
		 _localctx.terms =  new(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 222;
				Match(T__18);
				State = 223;
				_localctx.term = inequality_expression();
				 _localctx.terms.Add(_localctx.term.value); 
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Equality_expressionContext : ParserRuleContext {
		public Entity value;
		public Inequality_expressionContext expr;
		public Terms_listContext _terms_list;
		[System.Diagnostics.DebuggerNonUserCode] public Inequality_expressionContext inequality_expression() {
			return GetRuleContext<Inequality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Terms_listContext terms_list() {
			return GetRuleContext<Terms_listContext>(0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_localctx.expr = inequality_expression();
			 _localctx.value =  _localctx.expr.value; 
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 232;
				_localctx._terms_list = terms_list();

				        var list = _localctx._terms_list.terms.Prepend(_localctx.value).ToArray();
				        List<Entity> eqTerms = new();
				        for (int i = 0; i < list.Length - 1; i++)
				            eqTerms.Add(list[i].Equalizes(list[i + 1]));
				        _localctx.value =  eqTerms.Aggregate((eq1, eq2) => eq1 & eq2);
				    
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Negate_expressionContext : ParserRuleContext {
		public Entity value;
		public Equality_expressionContext op;
		public Negate_expressionContext opn;
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Negate_expressionContext negate_expression() {
			return GetRuleContext<Negate_expressionContext>(0);
		}
		public Negate_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negate_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterNegate_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitNegate_expression(this);
		}
	}

	[RuleVersion(0)]
	public Negate_expressionContext negate_expression() {
		Negate_expressionContext _localctx = new Negate_expressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_negate_expression);
		try {
			State = 248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237;
				Match(T__19);
				State = 238;
				_localctx.op = equality_expression();
				 _localctx.value =  !_localctx.op.value; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				Match(T__19);
				State = 242;
				_localctx.opn = negate_expression();
				 _localctx.value =  !_localctx.opn.value; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				_localctx.op = equality_expression();
				 _localctx.value =  _localctx.op.value; 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class And_expressionContext : ParserRuleContext {
		public Entity value;
		public Negate_expressionContext m1;
		public Negate_expressionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public Negate_expressionContext[] negate_expression() {
			return GetRuleContexts<Negate_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Negate_expressionContext negate_expression(int i) {
			return GetRuleContext<Negate_expressionContext>(i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			_localctx.m1 = negate_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__20 || _la==T__21) {
				{
				State = 260;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__20:
					{
					State = 252;
					Match(T__20);
					State = 253;
					_localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				case T__21:
					{
					State = 256;
					Match(T__21);
					State = 257;
					_localctx.m2 = negate_expression();
					 _localctx.value =  _localctx.value & _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Xor_expressionContext : ParserRuleContext {
		public Entity value;
		public And_expressionContext m1;
		public And_expressionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public Xor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xor_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterXor_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitXor_expression(this);
		}
	}

	[RuleVersion(0)]
	public Xor_expressionContext xor_expression() {
		Xor_expressionContext _localctx = new Xor_expressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_xor_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			_localctx.m1 = and_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__22) {
				{
				{
				State = 267;
				Match(T__22);
				State = 268;
				_localctx.m2 = and_expression();
				 _localctx.value =  _localctx.value ^ _localctx.m2.value; 
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Or_expressionContext : ParserRuleContext {
		public Entity value;
		public Xor_expressionContext m1;
		public Xor_expressionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public Xor_expressionContext[] xor_expression() {
			return GetRuleContexts<Xor_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Xor_expressionContext xor_expression(int i) {
			return GetRuleContext<Xor_expressionContext>(i);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_localctx.m1 = xor_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__23 || _la==T__24) {
				{
				State = 286;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__23:
					{
					State = 278;
					Match(T__23);
					State = 279;
					_localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				case T__24:
					{
					State = 282;
					Match(T__24);
					State = 283;
					_localctx.m2 = xor_expression();
					 _localctx.value =  _localctx.value | _localctx.m2.value; 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Implies_expressionContext : ParserRuleContext {
		public Entity value;
		public Or_expressionContext m1;
		public Or_expressionContext m2;
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext[] or_expression() {
			return GetRuleContexts<Or_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Or_expressionContext or_expression(int i) {
			return GetRuleContext<Or_expressionContext>(i);
		}
		public Implies_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implies_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterImplies_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitImplies_expression(this);
		}
	}

	[RuleVersion(0)]
	public Implies_expressionContext implies_expression() {
		Implies_expressionContext _localctx = new Implies_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_implies_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_localctx.m1 = or_expression();
			 _localctx.value =  _localctx.m1.value; 
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__25 || _la==T__26) {
				{
				State = 301;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__25:
					{
					State = 293;
					Match(T__25);
					State = 294;
					_localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				case T__26:
					{
					State = 297;
					Match(T__26);
					State = 298;
					_localctx.m2 = or_expression();
					 _localctx.value =  _localctx.value.Implies(_localctx.m2.value); 
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Provided_expressionContext : ParserRuleContext {
		public Entity value;
		public Implies_expressionContext expr;
		public Implies_expressionContext pred;
		[System.Diagnostics.DebuggerNonUserCode] public Implies_expressionContext[] implies_expression() {
			return GetRuleContexts<Implies_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Implies_expressionContext implies_expression(int i) {
			return GetRuleContext<Implies_expressionContext>(i);
		}
		public Provided_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_provided_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterProvided_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitProvided_expression(this);
		}
	}

	[RuleVersion(0)]
	public Provided_expressionContext provided_expression() {
		Provided_expressionContext _localctx = new Provided_expressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_provided_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_localctx.expr = implies_expression();
			 _localctx.value =  _localctx.expr.value; 
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__27) {
				{
				{
				State = 308;
				Match(T__27);
				State = 309;
				_localctx.pred = implies_expression();
				 _localctx.value =  _localctx.value.Provided(_localctx.pred.value); 
				}
				}
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class ExpressionContext : ParserRuleContext {
		public Entity value;
		public Provided_expressionContext s;
		[System.Diagnostics.DebuggerNonUserCode] public Provided_expressionContext provided_expression() {
			return GetRuleContext<Provided_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_localctx.s = provided_expression();
			 _localctx.value =  _localctx.s.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Function_argumentsContext : ParserRuleContext {
		public List<Entity> list;
		public ExpressionContext e;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_arguments);
		 _localctx.list =  new List<Entity>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -5948528656360L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 4467570830351532031L) != 0)) {
				{
				State = 320;
				_localctx.e = expression();
				 _localctx.list.Add(_localctx.e.value); 
				State = 328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__28) {
					{
					{
					State = 322;
					Match(T__28);
					State = 323;
					_localctx.e = expression();
					 _localctx.list.Add(_localctx.e.value); 
					}
					}
					State = 330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Interval_argumentsContext : ParserRuleContext {
		public (Entity from, Entity to) couple;
		public ExpressionContext from;
		public ExpressionContext to;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Interval_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterInterval_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitInterval_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Interval_argumentsContext interval_arguments() {
		Interval_argumentsContext _localctx = new Interval_argumentsContext(Context, State);
		EnterRule(_localctx, 42, RULE_interval_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			_localctx.from = expression();
			 _localctx.couple.from = _localctx.from.value; 
			State = 335;
			Match(T__29);
			State = 336;
			_localctx.to = expression();
			 _localctx.couple.to = _localctx.to.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class Cset_argumentsContext : ParserRuleContext {
		public (Entity variable, Entity predicate) couple;
		public ExpressionContext variable;
		public ExpressionContext predicate;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Cset_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cset_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterCset_arguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitCset_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Cset_argumentsContext cset_arguments() {
		Cset_argumentsContext _localctx = new Cset_argumentsContext(Context, State);
		EnterRule(_localctx, 44, RULE_cset_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339;
			_localctx.variable = expression();
			 _localctx.couple.variable = _localctx.variable.value; 
			State = 341;
			Match(T__30);
			State = 342;
			_localctx.predicate = expression();
			 _localctx.couple.predicate = _localctx.predicate.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class AtomContext : ParserRuleContext {
		public Entity value;
		public IToken _NUMBER;
		public IToken _BOOLEAN;
		public IToken _SPECIALSET;
		public IToken _VARIABLE;
		public ExpressionContext _expression;
		public Function_argumentsContext _function_arguments;
		public Interval_argumentsContext _interval_arguments;
		public Cset_argumentsContext cset_args;
		public Function_argumentsContext args;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(AngouriMathParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(AngouriMathParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPECIALSET() { return GetToken(AngouriMathParser.SPECIALSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(AngouriMathParser.VARIABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interval_argumentsContext interval_arguments() {
			return GetRuleContext<Interval_argumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cset_argumentsContext cset_arguments() {
			return GetRuleContext<Cset_argumentsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 46, RULE_atom);
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				Match(T__31);
				 _localctx.value =  Entity.Number.Real.PositiveInfinity; 
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347;
				Match(T__32);
				 _localctx.value =  Entity.Number.Real.NegativeInfinity; 
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 349;
				_localctx._NUMBER = Match(NUMBER);
				 _localctx.value =  Entity.Number.Complex.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351;
				_localctx._BOOLEAN = Match(BOOLEAN);
				 _localctx.value =  Entity.Boolean.Parse((_localctx._BOOLEAN!=null?_localctx._BOOLEAN.Text:null)); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 353;
				_localctx._SPECIALSET = Match(SPECIALSET);
				 _localctx.value =  Entity.Set.SpecialSet.Create((_localctx._SPECIALSET!=null?_localctx._SPECIALSET.Text:null)); 
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 355;
				_localctx._VARIABLE = Match(VARIABLE);
				 _localctx.value =  Entity.Variable.CreateVariableUnchecked((_localctx._VARIABLE!=null?_localctx._VARIABLE.Text:null)); 
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 357;
				Match(T__33);
				State = 358;
				_localctx._expression = expression();
				State = 359;
				Match(T__34);
				 _localctx.value =  _localctx._expression.value.Abs(); 
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 362;
				Match(T__35);
				State = 363;
				_localctx._function_arguments = function_arguments();
				State = 364;
				Match(T__36);
				 _localctx.value =  ParsingHelpers.TryBuildingMatrix(_localctx._function_arguments.list).T; 
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 367;
				Match(T__35);
				State = 368;
				_localctx._function_arguments = function_arguments();
				State = 369;
				Match(T__37);
				 _localctx.value =  ParsingHelpers.TryBuildingMatrix(_localctx._function_arguments.list); 
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 372;
				Match(T__38);
				State = 373;
				_localctx._interval_arguments = interval_arguments();
				State = 374;
				Match(T__39);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, false, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 377;
				Match(T__35);
				State = 378;
				_localctx._interval_arguments = interval_arguments();
				State = 379;
				Match(T__39);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, false); 
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 382;
				Match(T__35);
				State = 383;
				_localctx._interval_arguments = interval_arguments();
				State = 384;
				Match(T__37);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, true, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 387;
				Match(T__38);
				State = 388;
				_localctx._interval_arguments = interval_arguments();
				State = 389;
				Match(T__37);
				 _localctx.value =  new Entity.Set.Interval(_localctx._interval_arguments.couple.from, false, _localctx._interval_arguments.couple.to, true); 
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 392;
				Match(T__38);
				State = 393;
				_localctx._expression = expression();
				State = 394;
				Match(T__39);
				 _localctx.value =  _localctx._expression.value; 
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 397;
				Match(T__40);
				State = 398;
				_localctx.cset_args = cset_arguments();
				State = 399;
				Match(T__41);
				 _localctx.value =  new ConditionalSet(_localctx.cset_args.couple.variable, _localctx.cset_args.couple.predicate); 
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 402;
				Match(T__40);
				State = 403;
				_localctx.args = function_arguments();
				State = 404;
				Match(T__41);
				 _localctx.value =  new FiniteSet((IEnumerable<Entity>)_localctx.args.list); 
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 407;
				Match(T__42);
				State = 408;
				_localctx.args = function_arguments();
				State = 409;
				Match(T__39);
				 _localctx.value =  Assert("log", (1, 2), _localctx.args.list.Count) ? MathS.Log(10, _localctx.args.list[0]) : MathS.Log(_localctx.args.list[0], _localctx.args.list[1]); 
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 412;
				Match(T__43);
				State = 413;
				_localctx.args = function_arguments();
				State = 414;
				Match(T__39);
				 Assert("sqrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqrt(_localctx.args.list[0]); 
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 417;
				Match(T__44);
				State = 418;
				_localctx.args = function_arguments();
				State = 419;
				Match(T__39);
				 Assert("cbrt", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cbrt(_localctx.args.list[0]); 
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 422;
				Match(T__45);
				State = 423;
				_localctx.args = function_arguments();
				State = 424;
				Match(T__39);
				 Assert("sqr", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sqr(_localctx.args.list[0]); 
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 427;
				Match(T__46);
				State = 428;
				_localctx.args = function_arguments();
				State = 429;
				Match(T__39);
				 Assert("ln", 1, _localctx.args.list.Count); _localctx.value =  MathS.Ln(_localctx.args.list[0]); 
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 432;
				Match(T__47);
				State = 433;
				_localctx.args = function_arguments();
				State = 434;
				Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sin(_localctx.args.list[0]); 
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 437;
				Match(T__48);
				State = 438;
				_localctx.args = function_arguments();
				State = 439;
				Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cos(_localctx.args.list[0]); 
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 442;
				Match(T__49);
				State = 443;
				_localctx.args = function_arguments();
				State = 444;
				Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Tan(_localctx.args.list[0]); 
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 447;
				Match(T__50);
				State = 448;
				_localctx.args = function_arguments();
				State = 449;
				Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 452;
				Match(T__51);
				State = 453;
				_localctx.args = function_arguments();
				State = 454;
				Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cotan(_localctx.args.list[0]); 
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 457;
				Match(T__52);
				State = 458;
				_localctx.args = function_arguments();
				State = 459;
				Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Sec(_localctx.args.list[0]); 
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 462;
				Match(T__53);
				State = 463;
				_localctx.args = function_arguments();
				State = 464;
				Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 467;
				Match(T__54);
				State = 468;
				_localctx.args = function_arguments();
				State = 469;
				Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Cosec(_localctx.args.list[0]); 
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 472;
				Match(T__55);
				State = 473;
				_localctx.args = function_arguments();
				State = 474;
				Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 477;
				Match(T__56);
				State = 478;
				_localctx.args = function_arguments();
				State = 479;
				Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 482;
				Match(T__57);
				State = 483;
				_localctx.args = function_arguments();
				State = 484;
				Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 487;
				Match(T__58);
				State = 488;
				_localctx.args = function_arguments();
				State = 489;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 492;
				Match(T__59);
				State = 493;
				_localctx.args = function_arguments();
				State = 494;
				Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 497;
				Match(T__60);
				State = 498;
				_localctx.args = function_arguments();
				State = 499;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 502;
				Match(T__61);
				State = 503;
				_localctx.args = function_arguments();
				State = 504;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 507;
				Match(T__62);
				State = 508;
				_localctx.args = function_arguments();
				State = 509;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 512;
				Match(T__63);
				State = 513;
				_localctx.args = function_arguments();
				State = 514;
				Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsin(_localctx.args.list[0]); 
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 517;
				Match(T__64);
				State = 518;
				_localctx.args = function_arguments();
				State = 519;
				Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccos(_localctx.args.list[0]); 
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 522;
				Match(T__65);
				State = 523;
				_localctx.args = function_arguments();
				State = 524;
				Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arctan(_localctx.args.list[0]); 
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 527;
				Match(T__66);
				State = 528;
				_localctx.args = function_arguments();
				State = 529;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 532;
				Match(T__67);
				State = 533;
				_localctx.args = function_arguments();
				State = 534;
				Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arcsec(_localctx.args.list[0]); 
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 537;
				Match(T__68);
				State = 538;
				_localctx.args = function_arguments();
				State = 539;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccosec(_localctx.args.list[0]); 
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 542;
				Match(T__69);
				State = 543;
				_localctx.args = function_arguments();
				State = 544;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 547;
				Match(T__70);
				State = 548;
				_localctx.args = function_arguments();
				State = 549;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Arccotan(_localctx.args.list[0]); 
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 552;
				Match(T__71);
				State = 553;
				_localctx.args = function_arguments();
				State = 554;
				Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sinh(_localctx.args.list[0]); 
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 557;
				Match(T__72);
				State = 558;
				_localctx.args = function_arguments();
				State = 559;
				Match(T__39);
				 Assert("sin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sinh(_localctx.args.list[0]); 
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 562;
				Match(T__73);
				State = 563;
				_localctx.args = function_arguments();
				State = 564;
				Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosh(_localctx.args.list[0]); 
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 567;
				Match(T__74);
				State = 568;
				_localctx.args = function_arguments();
				State = 569;
				Match(T__39);
				 Assert("cos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosh(_localctx.args.list[0]); 
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 572;
				Match(T__75);
				State = 573;
				_localctx.args = function_arguments();
				State = 574;
				Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Tanh(_localctx.args.list[0]); 
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 577;
				Match(T__76);
				State = 578;
				_localctx.args = function_arguments();
				State = 579;
				Match(T__39);
				 Assert("tan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Tanh(_localctx.args.list[0]); 
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 582;
				Match(T__77);
				State = 583;
				_localctx.args = function_arguments();
				State = 584;
				Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 587;
				Match(T__78);
				State = 588;
				_localctx.args = function_arguments();
				State = 589;
				Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 592;
				Match(T__79);
				State = 593;
				_localctx.args = function_arguments();
				State = 594;
				Match(T__39);
				 Assert("cotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cotanh(_localctx.args.list[0]); 
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 597;
				Match(T__80);
				State = 598;
				_localctx.args = function_arguments();
				State = 599;
				Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sech(_localctx.args.list[0]); 
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 602;
				Match(T__81);
				State = 603;
				_localctx.args = function_arguments();
				State = 604;
				Match(T__39);
				 Assert("sec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Sech(_localctx.args.list[0]); 
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 607;
				Match(T__82);
				State = 608;
				_localctx.args = function_arguments();
				State = 609;
				Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosech(_localctx.args.list[0]); 
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 612;
				Match(T__83);
				State = 613;
				_localctx.args = function_arguments();
				State = 614;
				Match(T__39);
				 Assert("cosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Cosech(_localctx.args.list[0]); 
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 617;
				Match(T__84);
				State = 618;
				_localctx.args = function_arguments();
				State = 619;
				Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 622;
				Match(T__85);
				State = 623;
				_localctx.args = function_arguments();
				State = 624;
				Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 627;
				Match(T__86);
				State = 628;
				_localctx.args = function_arguments();
				State = 629;
				Match(T__39);
				 Assert("arcsin", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsinh(_localctx.args.list[0]); 
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 632;
				Match(T__87);
				State = 633;
				_localctx.args = function_arguments();
				State = 634;
				Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 637;
				Match(T__88);
				State = 638;
				_localctx.args = function_arguments();
				State = 639;
				Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 642;
				Match(T__89);
				State = 643;
				_localctx.args = function_arguments();
				State = 644;
				Match(T__39);
				 Assert("arccos", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosh(_localctx.args.list[0]); 
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 647;
				Match(T__90);
				State = 648;
				_localctx.args = function_arguments();
				State = 649;
				Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 652;
				Match(T__91);
				State = 653;
				_localctx.args = function_arguments();
				State = 654;
				Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 657;
				Match(T__92);
				State = 658;
				_localctx.args = function_arguments();
				State = 659;
				Match(T__39);
				 Assert("arctan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Artanh(_localctx.args.list[0]); 
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 662;
				Match(T__93);
				State = 663;
				_localctx.args = function_arguments();
				State = 664;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 667;
				Match(T__94);
				State = 668;
				_localctx.args = function_arguments();
				State = 669;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 672;
				Match(T__95);
				State = 673;
				_localctx.args = function_arguments();
				State = 674;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 677;
				Match(T__96);
				State = 678;
				_localctx.args = function_arguments();
				State = 679;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 682;
				Match(T__97);
				State = 683;
				_localctx.args = function_arguments();
				State = 684;
				Match(T__39);
				 Assert("arccotan", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcotanh(_localctx.args.list[0]); 
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 687;
				Match(T__98);
				State = 688;
				_localctx.args = function_arguments();
				State = 689;
				Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 692;
				Match(T__99);
				State = 693;
				_localctx.args = function_arguments();
				State = 694;
				Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 697;
				Match(T__100);
				State = 698;
				_localctx.args = function_arguments();
				State = 699;
				Match(T__39);
				 Assert("arcsec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arsech(_localctx.args.list[0]); 
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 702;
				Match(T__101);
				State = 703;
				_localctx.args = function_arguments();
				State = 704;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 707;
				Match(T__102);
				State = 708;
				_localctx.args = function_arguments();
				State = 709;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 712;
				Match(T__103);
				State = 713;
				_localctx.args = function_arguments();
				State = 714;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 717;
				Match(T__104);
				State = 718;
				_localctx.args = function_arguments();
				State = 719;
				Match(T__39);
				 Assert("arccosec", 1, _localctx.args.list.Count); _localctx.value =  MathS.Hyperbolic.Arcosech(_localctx.args.list[0]); 
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 722;
				Match(T__105);
				State = 723;
				_localctx.args = function_arguments();
				State = 724;
				Match(T__39);
				 Assert("gamma", 1, _localctx.args.list.Count); _localctx.value =  MathS.Gamma(_localctx.args.list[0]); 
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 727;
				Match(T__106);
				State = 728;
				_localctx.args = function_arguments();
				State = 729;
				Match(T__39);

				            if (Assert("derivative", (3, 2), _localctx.args.list.Count))
				            {
				                if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                    _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				                else
				                    throw new InvalidArgumentParseException("Expected integer number for the third argument of derivative");
				            } 
				            else
				                _localctx.value =  MathS.Derivative(_localctx.args.list[0], _localctx.args.list[1]);
				        
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 732;
				Match(T__107);
				State = 733;
				_localctx.args = function_arguments();
				State = 734;
				Match(T__39);
				 
				            if (Assert("integral", (3, 2), _localctx.args.list.Count))
				            {
				                if (_localctx.args.list[2] is Integer { EInteger: var asEInt })
				                    _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1], asEInt.ToInt32Checked());
				                else
				                    throw new InvalidArgumentParseException("Expected number for the third argument of integral");
				            }
				            else
				                _localctx.value =  MathS.Integral(_localctx.args.list[0], _localctx.args.list[1]);
				        
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 737;
				Match(T__108);
				State = 738;
				_localctx.args = function_arguments();
				State = 739;
				Match(T__39);
				 Assert("limit", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2]); 
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 742;
				Match(T__109);
				State = 743;
				_localctx.args = function_arguments();
				State = 744;
				Match(T__39);
				 Assert("limitleft", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Left); 
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 747;
				Match(T__110);
				State = 748;
				_localctx.args = function_arguments();
				State = 749;
				Match(T__39);
				 Assert("limitright", 3, _localctx.args.list.Count); _localctx.value =  MathS.Limit(_localctx.args.list[0], _localctx.args.list[1], _localctx.args.list[2], AngouriMath.Core.ApproachFrom.Right); 
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 752;
				Match(T__111);
				State = 753;
				_localctx.args = function_arguments();
				State = 754;
				Match(T__39);
				 Assert("signum", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 757;
				Match(T__112);
				State = 758;
				_localctx.args = function_arguments();
				State = 759;
				Match(T__39);
				 Assert("sgn", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 762;
				Match(T__113);
				State = 763;
				_localctx.args = function_arguments();
				State = 764;
				Match(T__39);
				 Assert("sign", 1, _localctx.args.list.Count); _localctx.value =  MathS.Signum(_localctx.args.list[0]); 
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 767;
				Match(T__114);
				State = 768;
				_localctx.args = function_arguments();
				State = 769;
				Match(T__39);
				 Assert("abs", 1, _localctx.args.list.Count); _localctx.value =  MathS.Abs(_localctx.args.list[0]); 
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 772;
				Match(T__115);
				State = 773;
				_localctx.args = function_arguments();
				State = 774;
				Match(T__39);
				 Assert("phi", 1, _localctx.args.list.Count); _localctx.value =  MathS.NumberTheory.Phi(_localctx.args.list[0]); 
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 777;
				Match(T__116);
				State = 778;
				_localctx.args = function_arguments();
				State = 779;
				Match(T__39);
				 
				            Assert("domain", 2, _localctx.args.list.Count); 
				            if (_localctx.args.list[1] is not SpecialSet ss)
				                throw new InvalidArgumentParseException($"Unrecognized special set {_localctx.args.list[1].Stringize()}");
				            _localctx.value =  _localctx.args.list[0].WithCodomain(ss.ToDomain());
				        
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 782;
				Match(T__117);
				State = 783;
				_localctx.args = function_arguments();
				State = 784;
				Match(T__39);

				            var cases = new List<Providedf>();
				            foreach (var arg in _localctx.args.list)
				                if (arg is Providedf provided)
				                    cases.Add(provided);
				                else
				                    cases.Add(new Providedf(arg, true));
				            _localctx.value =  new Piecewise(cases);
				        
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 787;
				Match(T__118);
				State = 788;
				_localctx.args = function_arguments();
				State = 789;
				Match(T__39);

				            if (_localctx.args.list.Count < 2)
				                throw new FunctionArgumentCountException("Should be at least one argument in apply function");
				            _localctx.value =  _localctx.args.list[0].Apply(_localctx.args.list.Skip(1).ToLList());
				        
				}
				break;
			case 94:
				EnterOuterAlt(_localctx, 94);
				{
				State = 792;
				Match(T__119);
				State = 793;
				_localctx.args = function_arguments();
				State = 794;
				Match(T__39);

				            if (_localctx.args.list.Count < 2)
				                throw new FunctionArgumentCountException("Should be at least two arguments in lambda function");
				            var body = _localctx.args.list.Last();
				            foreach (var x in ((IEnumerable<Entity>)_localctx.args.list).Reverse().Skip(1))
				            {
				                if (x is not Variable v) throw new InvalidArgumentParseException($"Lambda is expected to have valid parameters, {x} encountered instead");
				                body = body.LambdaOver(v);
				            }
				            _localctx.value =  body;
				        
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	internal partial class StatementContext : ParserRuleContext {
		public ExpressionContext _expression;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(AngouriMathParser.Eof, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IAngouriMathListener typedListener = listener as IAngouriMathListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			_localctx._expression = expression();
			State = 800;
			Match(Eof);
			 Result = _localctx._expression.value; 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,127,804,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,58,8,0,1,
		1,1,1,1,1,1,1,4,1,64,8,1,11,1,12,1,65,1,1,1,1,1,1,1,1,4,1,72,8,1,11,1,
		12,1,73,3,1,76,8,1,1,2,1,2,1,2,1,2,1,2,3,2,83,8,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,3,3,93,8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,103,8,3,1,3,
		1,3,1,3,3,3,108,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,120,8,
		4,10,4,12,4,123,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,135,8,
		5,10,5,12,5,138,9,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,150,8,
		6,10,6,12,6,153,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,165,8,
		7,10,7,12,7,168,9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,180,8,
		8,10,8,12,8,183,9,8,1,9,1,9,1,9,1,9,1,9,1,9,5,9,191,8,9,10,9,12,9,194,
		9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,218,8,10,10,10,12,10,221,
		9,10,1,11,1,11,1,11,1,11,4,11,227,8,11,11,11,12,11,228,1,12,1,12,1,12,
		1,12,1,12,3,12,236,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,3,13,249,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		5,14,261,8,14,10,14,12,14,264,9,14,1,15,1,15,1,15,1,15,1,15,1,15,5,15,
		272,8,15,10,15,12,15,275,9,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,5,16,287,8,16,10,16,12,16,290,9,16,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,5,17,302,8,17,10,17,12,17,305,9,17,1,18,1,18,
		1,18,1,18,1,18,1,18,5,18,313,8,18,10,18,12,18,316,9,18,1,19,1,19,1,19,
		1,20,1,20,1,20,1,20,1,20,1,20,5,20,327,8,20,10,20,12,20,330,9,20,3,20,
		332,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,3,23,798,8,23,1,24,1,24,1,24,1,24,1,24,0,0,25,0,2,4,
		6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,0,910,
		0,57,1,0,0,0,2,75,1,0,0,0,4,77,1,0,0,0,6,107,1,0,0,0,8,109,1,0,0,0,10,
		124,1,0,0,0,12,139,1,0,0,0,14,154,1,0,0,0,16,169,1,0,0,0,18,184,1,0,0,
		0,20,195,1,0,0,0,22,226,1,0,0,0,24,230,1,0,0,0,26,248,1,0,0,0,28,250,1,
		0,0,0,30,265,1,0,0,0,32,276,1,0,0,0,34,291,1,0,0,0,36,306,1,0,0,0,38,317,
		1,0,0,0,40,331,1,0,0,0,42,333,1,0,0,0,44,339,1,0,0,0,46,797,1,0,0,0,48,
		799,1,0,0,0,50,51,3,46,23,0,51,52,5,1,0,0,52,53,6,0,-1,0,53,58,1,0,0,0,
		54,55,3,46,23,0,55,56,6,0,-1,0,56,58,1,0,0,0,57,50,1,0,0,0,57,54,1,0,0,
		0,58,1,1,0,0,0,59,60,5,2,0,0,60,61,3,0,0,0,61,62,6,1,-1,0,62,64,1,0,0,
		0,63,59,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,76,1,0,0,
		0,67,68,5,2,0,0,68,69,3,6,3,0,69,70,6,1,-1,0,70,72,1,0,0,0,71,67,1,0,0,
		0,72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,76,1,0,0,0,75,63,1,0,0,
		0,75,71,1,0,0,0,76,3,1,0,0,0,77,78,3,0,0,0,78,82,6,2,-1,0,79,80,3,2,1,
		0,80,81,6,2,-1,0,81,83,1,0,0,0,82,79,1,0,0,0,82,83,1,0,0,0,83,5,1,0,0,
		0,84,85,5,3,0,0,85,86,3,4,2,0,86,87,6,3,-1,0,87,93,1,0,0,0,88,89,5,4,0,
		0,89,90,3,4,2,0,90,91,6,3,-1,0,91,93,1,0,0,0,92,84,1,0,0,0,92,88,1,0,0,
		0,93,108,1,0,0,0,94,95,5,3,0,0,95,96,3,6,3,0,96,97,6,3,-1,0,97,103,1,0,
		0,0,98,99,5,4,0,0,99,100,3,6,3,0,100,101,6,3,-1,0,101,103,1,0,0,0,102,
		94,1,0,0,0,102,98,1,0,0,0,103,108,1,0,0,0,104,105,3,4,2,0,105,106,6,3,
		-1,0,106,108,1,0,0,0,107,92,1,0,0,0,107,102,1,0,0,0,107,104,1,0,0,0,108,
		7,1,0,0,0,109,110,3,6,3,0,110,121,6,4,-1,0,111,112,5,5,0,0,112,113,3,6,
		3,0,113,114,6,4,-1,0,114,120,1,0,0,0,115,116,5,6,0,0,116,117,3,6,3,0,117,
		118,6,4,-1,0,118,120,1,0,0,0,119,111,1,0,0,0,119,115,1,0,0,0,120,123,1,
		0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,9,1,0,0,0,123,121,1,0,0,0,124,
		125,3,8,4,0,125,136,6,5,-1,0,126,127,5,4,0,0,127,128,3,8,4,0,128,129,6,
		5,-1,0,129,135,1,0,0,0,130,131,5,3,0,0,131,132,3,8,4,0,132,133,6,5,-1,
		0,133,135,1,0,0,0,134,126,1,0,0,0,134,130,1,0,0,0,135,138,1,0,0,0,136,
		134,1,0,0,0,136,137,1,0,0,0,137,11,1,0,0,0,138,136,1,0,0,0,139,140,3,10,
		5,0,140,151,6,6,-1,0,141,142,5,7,0,0,142,143,3,10,5,0,143,144,6,6,-1,0,
		144,150,1,0,0,0,145,146,5,8,0,0,146,147,3,10,5,0,147,148,6,6,-1,0,148,
		150,1,0,0,0,149,141,1,0,0,0,149,145,1,0,0,0,150,153,1,0,0,0,151,149,1,
		0,0,0,151,152,1,0,0,0,152,13,1,0,0,0,153,151,1,0,0,0,154,155,3,12,6,0,
		155,166,6,7,-1,0,156,157,5,9,0,0,157,158,3,12,6,0,158,159,6,7,-1,0,159,
		165,1,0,0,0,160,161,5,10,0,0,161,162,3,12,6,0,162,163,6,7,-1,0,163,165,
		1,0,0,0,164,156,1,0,0,0,164,160,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,
		0,166,167,1,0,0,0,167,15,1,0,0,0,168,166,1,0,0,0,169,170,3,14,7,0,170,
		181,6,8,-1,0,171,172,5,11,0,0,172,173,3,14,7,0,173,174,6,8,-1,0,174,180,
		1,0,0,0,175,176,5,12,0,0,176,177,3,14,7,0,177,178,6,8,-1,0,178,180,1,0,
		0,0,179,171,1,0,0,0,179,175,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
		182,1,0,0,0,182,17,1,0,0,0,183,181,1,0,0,0,184,185,3,16,8,0,185,192,6,
		9,-1,0,186,187,5,13,0,0,187,188,3,16,8,0,188,189,6,9,-1,0,189,191,1,0,
		0,0,190,186,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,
		19,1,0,0,0,194,192,1,0,0,0,195,196,3,18,9,0,196,219,6,10,-1,0,197,198,
		5,14,0,0,198,199,3,18,9,0,199,200,6,10,-1,0,200,218,1,0,0,0,201,202,5,
		15,0,0,202,203,3,18,9,0,203,204,6,10,-1,0,204,218,1,0,0,0,205,206,5,16,
		0,0,206,207,3,18,9,0,207,208,6,10,-1,0,208,218,1,0,0,0,209,210,5,17,0,
		0,210,211,3,18,9,0,211,212,6,10,-1,0,212,218,1,0,0,0,213,214,5,18,0,0,
		214,215,3,18,9,0,215,216,6,10,-1,0,216,218,1,0,0,0,217,197,1,0,0,0,217,
		201,1,0,0,0,217,205,1,0,0,0,217,209,1,0,0,0,217,213,1,0,0,0,218,221,1,
		0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,21,1,0,0,0,221,219,1,0,0,0,222,
		223,5,19,0,0,223,224,3,20,10,0,224,225,6,11,-1,0,225,227,1,0,0,0,226,222,
		1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,23,1,0,0,0,
		230,231,3,20,10,0,231,235,6,12,-1,0,232,233,3,22,11,0,233,234,6,12,-1,
		0,234,236,1,0,0,0,235,232,1,0,0,0,235,236,1,0,0,0,236,25,1,0,0,0,237,238,
		5,20,0,0,238,239,3,24,12,0,239,240,6,13,-1,0,240,249,1,0,0,0,241,242,5,
		20,0,0,242,243,3,26,13,0,243,244,6,13,-1,0,244,249,1,0,0,0,245,246,3,24,
		12,0,246,247,6,13,-1,0,247,249,1,0,0,0,248,237,1,0,0,0,248,241,1,0,0,0,
		248,245,1,0,0,0,249,27,1,0,0,0,250,251,3,26,13,0,251,262,6,14,-1,0,252,
		253,5,21,0,0,253,254,3,26,13,0,254,255,6,14,-1,0,255,261,1,0,0,0,256,257,
		5,22,0,0,257,258,3,26,13,0,258,259,6,14,-1,0,259,261,1,0,0,0,260,252,1,
		0,0,0,260,256,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,
		263,29,1,0,0,0,264,262,1,0,0,0,265,266,3,28,14,0,266,273,6,15,-1,0,267,
		268,5,23,0,0,268,269,3,28,14,0,269,270,6,15,-1,0,270,272,1,0,0,0,271,267,
		1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,31,1,0,0,0,
		275,273,1,0,0,0,276,277,3,30,15,0,277,288,6,16,-1,0,278,279,5,24,0,0,279,
		280,3,30,15,0,280,281,6,16,-1,0,281,287,1,0,0,0,282,283,5,25,0,0,283,284,
		3,30,15,0,284,285,6,16,-1,0,285,287,1,0,0,0,286,278,1,0,0,0,286,282,1,
		0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,33,1,0,0,0,290,
		288,1,0,0,0,291,292,3,32,16,0,292,303,6,17,-1,0,293,294,5,26,0,0,294,295,
		3,32,16,0,295,296,6,17,-1,0,296,302,1,0,0,0,297,298,5,27,0,0,298,299,3,
		32,16,0,299,300,6,17,-1,0,300,302,1,0,0,0,301,293,1,0,0,0,301,297,1,0,
		0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,35,1,0,0,0,305,
		303,1,0,0,0,306,307,3,34,17,0,307,314,6,18,-1,0,308,309,5,28,0,0,309,310,
		3,34,17,0,310,311,6,18,-1,0,311,313,1,0,0,0,312,308,1,0,0,0,313,316,1,
		0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,37,1,0,0,0,316,314,1,0,0,0,317,
		318,3,36,18,0,318,319,6,19,-1,0,319,39,1,0,0,0,320,321,3,38,19,0,321,328,
		6,20,-1,0,322,323,5,29,0,0,323,324,3,38,19,0,324,325,6,20,-1,0,325,327,
		1,0,0,0,326,322,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,
		0,329,332,1,0,0,0,330,328,1,0,0,0,331,320,1,0,0,0,331,332,1,0,0,0,332,
		41,1,0,0,0,333,334,3,38,19,0,334,335,6,21,-1,0,335,336,5,30,0,0,336,337,
		3,38,19,0,337,338,6,21,-1,0,338,43,1,0,0,0,339,340,3,38,19,0,340,341,6,
		22,-1,0,341,342,5,31,0,0,342,343,3,38,19,0,343,344,6,22,-1,0,344,45,1,
		0,0,0,345,346,5,32,0,0,346,798,6,23,-1,0,347,348,5,33,0,0,348,798,6,23,
		-1,0,349,350,5,122,0,0,350,798,6,23,-1,0,351,352,5,124,0,0,352,798,6,23,
		-1,0,353,354,5,123,0,0,354,798,6,23,-1,0,355,356,5,125,0,0,356,798,6,23,
		-1,0,357,358,5,34,0,0,358,359,3,38,19,0,359,360,5,35,0,0,360,361,6,23,
		-1,0,361,798,1,0,0,0,362,363,5,36,0,0,363,364,3,40,20,0,364,365,5,37,0,
		0,365,366,6,23,-1,0,366,798,1,0,0,0,367,368,5,36,0,0,368,369,3,40,20,0,
		369,370,5,38,0,0,370,371,6,23,-1,0,371,798,1,0,0,0,372,373,5,39,0,0,373,
		374,3,42,21,0,374,375,5,40,0,0,375,376,6,23,-1,0,376,798,1,0,0,0,377,378,
		5,36,0,0,378,379,3,42,21,0,379,380,5,40,0,0,380,381,6,23,-1,0,381,798,
		1,0,0,0,382,383,5,36,0,0,383,384,3,42,21,0,384,385,5,38,0,0,385,386,6,
		23,-1,0,386,798,1,0,0,0,387,388,5,39,0,0,388,389,3,42,21,0,389,390,5,38,
		0,0,390,391,6,23,-1,0,391,798,1,0,0,0,392,393,5,39,0,0,393,394,3,38,19,
		0,394,395,5,40,0,0,395,396,6,23,-1,0,396,798,1,0,0,0,397,398,5,41,0,0,
		398,399,3,44,22,0,399,400,5,42,0,0,400,401,6,23,-1,0,401,798,1,0,0,0,402,
		403,5,41,0,0,403,404,3,40,20,0,404,405,5,42,0,0,405,406,6,23,-1,0,406,
		798,1,0,0,0,407,408,5,43,0,0,408,409,3,40,20,0,409,410,5,40,0,0,410,411,
		6,23,-1,0,411,798,1,0,0,0,412,413,5,44,0,0,413,414,3,40,20,0,414,415,5,
		40,0,0,415,416,6,23,-1,0,416,798,1,0,0,0,417,418,5,45,0,0,418,419,3,40,
		20,0,419,420,5,40,0,0,420,421,6,23,-1,0,421,798,1,0,0,0,422,423,5,46,0,
		0,423,424,3,40,20,0,424,425,5,40,0,0,425,426,6,23,-1,0,426,798,1,0,0,0,
		427,428,5,47,0,0,428,429,3,40,20,0,429,430,5,40,0,0,430,431,6,23,-1,0,
		431,798,1,0,0,0,432,433,5,48,0,0,433,434,3,40,20,0,434,435,5,40,0,0,435,
		436,6,23,-1,0,436,798,1,0,0,0,437,438,5,49,0,0,438,439,3,40,20,0,439,440,
		5,40,0,0,440,441,6,23,-1,0,441,798,1,0,0,0,442,443,5,50,0,0,443,444,3,
		40,20,0,444,445,5,40,0,0,445,446,6,23,-1,0,446,798,1,0,0,0,447,448,5,51,
		0,0,448,449,3,40,20,0,449,450,5,40,0,0,450,451,6,23,-1,0,451,798,1,0,0,
		0,452,453,5,52,0,0,453,454,3,40,20,0,454,455,5,40,0,0,455,456,6,23,-1,
		0,456,798,1,0,0,0,457,458,5,53,0,0,458,459,3,40,20,0,459,460,5,40,0,0,
		460,461,6,23,-1,0,461,798,1,0,0,0,462,463,5,54,0,0,463,464,3,40,20,0,464,
		465,5,40,0,0,465,466,6,23,-1,0,466,798,1,0,0,0,467,468,5,55,0,0,468,469,
		3,40,20,0,469,470,5,40,0,0,470,471,6,23,-1,0,471,798,1,0,0,0,472,473,5,
		56,0,0,473,474,3,40,20,0,474,475,5,40,0,0,475,476,6,23,-1,0,476,798,1,
		0,0,0,477,478,5,57,0,0,478,479,3,40,20,0,479,480,5,40,0,0,480,481,6,23,
		-1,0,481,798,1,0,0,0,482,483,5,58,0,0,483,484,3,40,20,0,484,485,5,40,0,
		0,485,486,6,23,-1,0,486,798,1,0,0,0,487,488,5,59,0,0,488,489,3,40,20,0,
		489,490,5,40,0,0,490,491,6,23,-1,0,491,798,1,0,0,0,492,493,5,60,0,0,493,
		494,3,40,20,0,494,495,5,40,0,0,495,496,6,23,-1,0,496,798,1,0,0,0,497,498,
		5,61,0,0,498,499,3,40,20,0,499,500,5,40,0,0,500,501,6,23,-1,0,501,798,
		1,0,0,0,502,503,5,62,0,0,503,504,3,40,20,0,504,505,5,40,0,0,505,506,6,
		23,-1,0,506,798,1,0,0,0,507,508,5,63,0,0,508,509,3,40,20,0,509,510,5,40,
		0,0,510,511,6,23,-1,0,511,798,1,0,0,0,512,513,5,64,0,0,513,514,3,40,20,
		0,514,515,5,40,0,0,515,516,6,23,-1,0,516,798,1,0,0,0,517,518,5,65,0,0,
		518,519,3,40,20,0,519,520,5,40,0,0,520,521,6,23,-1,0,521,798,1,0,0,0,522,
		523,5,66,0,0,523,524,3,40,20,0,524,525,5,40,0,0,525,526,6,23,-1,0,526,
		798,1,0,0,0,527,528,5,67,0,0,528,529,3,40,20,0,529,530,5,40,0,0,530,531,
		6,23,-1,0,531,798,1,0,0,0,532,533,5,68,0,0,533,534,3,40,20,0,534,535,5,
		40,0,0,535,536,6,23,-1,0,536,798,1,0,0,0,537,538,5,69,0,0,538,539,3,40,
		20,0,539,540,5,40,0,0,540,541,6,23,-1,0,541,798,1,0,0,0,542,543,5,70,0,
		0,543,544,3,40,20,0,544,545,5,40,0,0,545,546,6,23,-1,0,546,798,1,0,0,0,
		547,548,5,71,0,0,548,549,3,40,20,0,549,550,5,40,0,0,550,551,6,23,-1,0,
		551,798,1,0,0,0,552,553,5,72,0,0,553,554,3,40,20,0,554,555,5,40,0,0,555,
		556,6,23,-1,0,556,798,1,0,0,0,557,558,5,73,0,0,558,559,3,40,20,0,559,560,
		5,40,0,0,560,561,6,23,-1,0,561,798,1,0,0,0,562,563,5,74,0,0,563,564,3,
		40,20,0,564,565,5,40,0,0,565,566,6,23,-1,0,566,798,1,0,0,0,567,568,5,75,
		0,0,568,569,3,40,20,0,569,570,5,40,0,0,570,571,6,23,-1,0,571,798,1,0,0,
		0,572,573,5,76,0,0,573,574,3,40,20,0,574,575,5,40,0,0,575,576,6,23,-1,
		0,576,798,1,0,0,0,577,578,5,77,0,0,578,579,3,40,20,0,579,580,5,40,0,0,
		580,581,6,23,-1,0,581,798,1,0,0,0,582,583,5,78,0,0,583,584,3,40,20,0,584,
		585,5,40,0,0,585,586,6,23,-1,0,586,798,1,0,0,0,587,588,5,79,0,0,588,589,
		3,40,20,0,589,590,5,40,0,0,590,591,6,23,-1,0,591,798,1,0,0,0,592,593,5,
		80,0,0,593,594,3,40,20,0,594,595,5,40,0,0,595,596,6,23,-1,0,596,798,1,
		0,0,0,597,598,5,81,0,0,598,599,3,40,20,0,599,600,5,40,0,0,600,601,6,23,
		-1,0,601,798,1,0,0,0,602,603,5,82,0,0,603,604,3,40,20,0,604,605,5,40,0,
		0,605,606,6,23,-1,0,606,798,1,0,0,0,607,608,5,83,0,0,608,609,3,40,20,0,
		609,610,5,40,0,0,610,611,6,23,-1,0,611,798,1,0,0,0,612,613,5,84,0,0,613,
		614,3,40,20,0,614,615,5,40,0,0,615,616,6,23,-1,0,616,798,1,0,0,0,617,618,
		5,85,0,0,618,619,3,40,20,0,619,620,5,40,0,0,620,621,6,23,-1,0,621,798,
		1,0,0,0,622,623,5,86,0,0,623,624,3,40,20,0,624,625,5,40,0,0,625,626,6,
		23,-1,0,626,798,1,0,0,0,627,628,5,87,0,0,628,629,3,40,20,0,629,630,5,40,
		0,0,630,631,6,23,-1,0,631,798,1,0,0,0,632,633,5,88,0,0,633,634,3,40,20,
		0,634,635,5,40,0,0,635,636,6,23,-1,0,636,798,1,0,0,0,637,638,5,89,0,0,
		638,639,3,40,20,0,639,640,5,40,0,0,640,641,6,23,-1,0,641,798,1,0,0,0,642,
		643,5,90,0,0,643,644,3,40,20,0,644,645,5,40,0,0,645,646,6,23,-1,0,646,
		798,1,0,0,0,647,648,5,91,0,0,648,649,3,40,20,0,649,650,5,40,0,0,650,651,
		6,23,-1,0,651,798,1,0,0,0,652,653,5,92,0,0,653,654,3,40,20,0,654,655,5,
		40,0,0,655,656,6,23,-1,0,656,798,1,0,0,0,657,658,5,93,0,0,658,659,3,40,
		20,0,659,660,5,40,0,0,660,661,6,23,-1,0,661,798,1,0,0,0,662,663,5,94,0,
		0,663,664,3,40,20,0,664,665,5,40,0,0,665,666,6,23,-1,0,666,798,1,0,0,0,
		667,668,5,95,0,0,668,669,3,40,20,0,669,670,5,40,0,0,670,671,6,23,-1,0,
		671,798,1,0,0,0,672,673,5,96,0,0,673,674,3,40,20,0,674,675,5,40,0,0,675,
		676,6,23,-1,0,676,798,1,0,0,0,677,678,5,97,0,0,678,679,3,40,20,0,679,680,
		5,40,0,0,680,681,6,23,-1,0,681,798,1,0,0,0,682,683,5,98,0,0,683,684,3,
		40,20,0,684,685,5,40,0,0,685,686,6,23,-1,0,686,798,1,0,0,0,687,688,5,99,
		0,0,688,689,3,40,20,0,689,690,5,40,0,0,690,691,6,23,-1,0,691,798,1,0,0,
		0,692,693,5,100,0,0,693,694,3,40,20,0,694,695,5,40,0,0,695,696,6,23,-1,
		0,696,798,1,0,0,0,697,698,5,101,0,0,698,699,3,40,20,0,699,700,5,40,0,0,
		700,701,6,23,-1,0,701,798,1,0,0,0,702,703,5,102,0,0,703,704,3,40,20,0,
		704,705,5,40,0,0,705,706,6,23,-1,0,706,798,1,0,0,0,707,708,5,103,0,0,708,
		709,3,40,20,0,709,710,5,40,0,0,710,711,6,23,-1,0,711,798,1,0,0,0,712,713,
		5,104,0,0,713,714,3,40,20,0,714,715,5,40,0,0,715,716,6,23,-1,0,716,798,
		1,0,0,0,717,718,5,105,0,0,718,719,3,40,20,0,719,720,5,40,0,0,720,721,6,
		23,-1,0,721,798,1,0,0,0,722,723,5,106,0,0,723,724,3,40,20,0,724,725,5,
		40,0,0,725,726,6,23,-1,0,726,798,1,0,0,0,727,728,5,107,0,0,728,729,3,40,
		20,0,729,730,5,40,0,0,730,731,6,23,-1,0,731,798,1,0,0,0,732,733,5,108,
		0,0,733,734,3,40,20,0,734,735,5,40,0,0,735,736,6,23,-1,0,736,798,1,0,0,
		0,737,738,5,109,0,0,738,739,3,40,20,0,739,740,5,40,0,0,740,741,6,23,-1,
		0,741,798,1,0,0,0,742,743,5,110,0,0,743,744,3,40,20,0,744,745,5,40,0,0,
		745,746,6,23,-1,0,746,798,1,0,0,0,747,748,5,111,0,0,748,749,3,40,20,0,
		749,750,5,40,0,0,750,751,6,23,-1,0,751,798,1,0,0,0,752,753,5,112,0,0,753,
		754,3,40,20,0,754,755,5,40,0,0,755,756,6,23,-1,0,756,798,1,0,0,0,757,758,
		5,113,0,0,758,759,3,40,20,0,759,760,5,40,0,0,760,761,6,23,-1,0,761,798,
		1,0,0,0,762,763,5,114,0,0,763,764,3,40,20,0,764,765,5,40,0,0,765,766,6,
		23,-1,0,766,798,1,0,0,0,767,768,5,115,0,0,768,769,3,40,20,0,769,770,5,
		40,0,0,770,771,6,23,-1,0,771,798,1,0,0,0,772,773,5,116,0,0,773,774,3,40,
		20,0,774,775,5,40,0,0,775,776,6,23,-1,0,776,798,1,0,0,0,777,778,5,117,
		0,0,778,779,3,40,20,0,779,780,5,40,0,0,780,781,6,23,-1,0,781,798,1,0,0,
		0,782,783,5,118,0,0,783,784,3,40,20,0,784,785,5,40,0,0,785,786,6,23,-1,
		0,786,798,1,0,0,0,787,788,5,119,0,0,788,789,3,40,20,0,789,790,5,40,0,0,
		790,791,6,23,-1,0,791,798,1,0,0,0,792,793,5,120,0,0,793,794,3,40,20,0,
		794,795,5,40,0,0,795,796,6,23,-1,0,796,798,1,0,0,0,797,345,1,0,0,0,797,
		347,1,0,0,0,797,349,1,0,0,0,797,351,1,0,0,0,797,353,1,0,0,0,797,355,1,
		0,0,0,797,357,1,0,0,0,797,362,1,0,0,0,797,367,1,0,0,0,797,372,1,0,0,0,
		797,377,1,0,0,0,797,382,1,0,0,0,797,387,1,0,0,0,797,392,1,0,0,0,797,397,
		1,0,0,0,797,402,1,0,0,0,797,407,1,0,0,0,797,412,1,0,0,0,797,417,1,0,0,
		0,797,422,1,0,0,0,797,427,1,0,0,0,797,432,1,0,0,0,797,437,1,0,0,0,797,
		442,1,0,0,0,797,447,1,0,0,0,797,452,1,0,0,0,797,457,1,0,0,0,797,462,1,
		0,0,0,797,467,1,0,0,0,797,472,1,0,0,0,797,477,1,0,0,0,797,482,1,0,0,0,
		797,487,1,0,0,0,797,492,1,0,0,0,797,497,1,0,0,0,797,502,1,0,0,0,797,507,
		1,0,0,0,797,512,1,0,0,0,797,517,1,0,0,0,797,522,1,0,0,0,797,527,1,0,0,
		0,797,532,1,0,0,0,797,537,1,0,0,0,797,542,1,0,0,0,797,547,1,0,0,0,797,
		552,1,0,0,0,797,557,1,0,0,0,797,562,1,0,0,0,797,567,1,0,0,0,797,572,1,
		0,0,0,797,577,1,0,0,0,797,582,1,0,0,0,797,587,1,0,0,0,797,592,1,0,0,0,
		797,597,1,0,0,0,797,602,1,0,0,0,797,607,1,0,0,0,797,612,1,0,0,0,797,617,
		1,0,0,0,797,622,1,0,0,0,797,627,1,0,0,0,797,632,1,0,0,0,797,637,1,0,0,
		0,797,642,1,0,0,0,797,647,1,0,0,0,797,652,1,0,0,0,797,657,1,0,0,0,797,
		662,1,0,0,0,797,667,1,0,0,0,797,672,1,0,0,0,797,677,1,0,0,0,797,682,1,
		0,0,0,797,687,1,0,0,0,797,692,1,0,0,0,797,697,1,0,0,0,797,702,1,0,0,0,
		797,707,1,0,0,0,797,712,1,0,0,0,797,717,1,0,0,0,797,722,1,0,0,0,797,727,
		1,0,0,0,797,732,1,0,0,0,797,737,1,0,0,0,797,742,1,0,0,0,797,747,1,0,0,
		0,797,752,1,0,0,0,797,757,1,0,0,0,797,762,1,0,0,0,797,767,1,0,0,0,797,
		772,1,0,0,0,797,777,1,0,0,0,797,782,1,0,0,0,797,787,1,0,0,0,797,792,1,
		0,0,0,798,47,1,0,0,0,799,800,3,38,19,0,800,801,5,0,0,1,801,802,6,24,-1,
		0,802,49,1,0,0,0,35,57,65,73,75,82,92,102,107,119,121,134,136,149,151,
		164,166,179,181,192,217,219,228,235,248,260,262,273,286,288,301,303,314,
		328,331,797
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace AngouriMath.Core.Antlr
